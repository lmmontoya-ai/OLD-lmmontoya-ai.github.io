---
// src/components/cards/LiteratureCard.astro
import type { CollectionEntry } from "astro:content";

interface Props {
  post: CollectionEntry<"posts">;
  class?: string;
}

const { post, class: className } = Astro.props;
const { title, excerpt, date, literature } = post.data;

const formattedDate = date.toLocaleDateString("en-US", {
  month: "short",
  day: "numeric",
  year: "numeric",
});

// Generate star rating display
const renderStars = (rating: number) => {
  return Array.from({ length: 5 }, (_, i) => i < rating);
};

// Get type icon
const getTypeIcon = (type: string) => {
  switch (type) {
    case "Paper":
      return `<svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
      </svg>`;
    case "Video":
      return `<svg class="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"/>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>`;
    case "Book":
      return `<svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
      </svg>`;
    default:
      return `<svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
      </svg>`;
  }
};

// Get difficulty badge color
const getDifficultyColor = (difficulty: string) => {
  switch (difficulty) {
    case "Introductory":
      return "bg-green-100 text-green-700 border-green-200";
    case "Advanced":
      return "bg-red-100 text-red-700 border-red-200";
    default:
      return "bg-yellow-100 text-yellow-700 border-yellow-200";
  }
};
---

<article
  class={`bg-surface-secondary/80 backdrop-blur-sm border border-primary rounded-xl p-6 hover:shadow-lg hover:border-interactive-blue/30 transition-all duration-300 h-full flex flex-col relative ${className || ""}`}
>
  <!-- Header -->
  <div class="flex items-start justify-between mb-4">
    <div class="flex items-center gap-2">
      <div
        class="flex items-center justify-center w-8 h-8 rounded-lg bg-gray-100"
        set:html={getTypeIcon(literature?.type || "")}
      />
      <div class="flex flex-col">
        <span class="text-sm font-medium text-primary"
          >{literature?.type || "Resource"}</span
        >
        {
          literature?.year && (
            <span class="text-xs text-tertiary">{literature.year}</span>
          )
        }
      </div>
    </div>

    {
      literature?.difficulty && (
        <span
          class={`px-2 py-1 text-xs font-medium rounded-full border ${getDifficultyColor(literature.difficulty)}`}
        >
          {literature.difficulty}
        </span>
      )
    }
  </div>

  <!-- Content -->
  <div class="space-y-3">
    <h3 class="text-lg font-semibold text-primary line-clamp-2">
      {title}
    </h3>

    {
      literature?.authors && literature.authors.length > 0 && (
        <div class="flex items-center gap-2 text-sm text-secondary">
          <svg
            class="w-4 h-4 text-tertiary"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
            />
          </svg>
          <span>
            {literature.authors.length > 2
              ? `${literature.authors.slice(0, 2).join(", ")} +${literature.authors.length - 2} more`
              : literature.authors.join(", ")}
          </span>
        </div>
      )
    }

    <p class="text-secondary text-sm line-clamp-3 leading-relaxed">
      {excerpt}
    </p>

    {
      literature?.rating && (
        <div class="flex items-center gap-2">
          <div class="flex items-center gap-1">
            {renderStars(literature.rating).map((filled, i) => (
              <svg
                class={`w-3 h-3 ${filled ? "text-yellow-400 fill-current" : "text-gray-300"}`}
                viewBox="0 0 20 20"
              >
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
          </div>
          <span class="text-xs text-tertiary">({literature.rating}/5)</span>
        </div>
      )
    }

    {
      literature?.recommendedFor && literature.recommendedFor.length > 0 && (
        <div class="space-y-1">
          <span class="text-xs font-medium text-tertiary uppercase tracking-wide">
            Recommended for
          </span>
          <div class="flex flex-wrap gap-1">
            {literature.recommendedFor.slice(0, 2).map((audience) => (
              <span class="px-2 py-1 text-xs bg-surface-tertiary rounded text-secondary">
                {audience}
              </span>
            ))}
            {literature.recommendedFor.length > 2 && (
              <span class="px-2 py-1 text-xs bg-surface-tertiary rounded text-tertiary">
                +{literature.recommendedFor.length - 2} more
              </span>
            )}
          </div>
        </div>
      )
    }
  </div>

  <!-- Footer -->
  <div
    class="flex items-center justify-between pt-4 mt-auto border-t border-surface-tertiary"
  >
    <time class="text-xs text-tertiary" datetime={date.toISOString()}>
      Added {formattedDate}
    </time>

    {
      literature?.source && (
        <a
          href={literature.source}
          target="_blank"
          rel="noopener"
          class="inline-flex items-center gap-1 px-2 py-1 text-xs text-interactive-blue hover:text-interactive-blue/80 bg-interactive-blue/10 hover:bg-interactive-blue/20 rounded transition-colors"
          aria-label="View source"
          onclick="event.stopPropagation()"
        >
          <span>View Source</span>
          <svg
            class="w-3 h-3"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
            />
          </svg>
        </a>
      )
    }
  </div>
</article>
