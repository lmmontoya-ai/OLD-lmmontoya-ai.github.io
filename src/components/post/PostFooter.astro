---
import type { Post } from '../../utils/content';
import { getRelatedPosts } from '../../utils/content';

interface Props {
  post: Post;
  accentColor: 'blue' | 'gold' | 'green';
}

const { post, accentColor } = Astro.props;

// Get related posts
const relatedPosts = await getRelatedPosts(post, 3);

// Social sharing configuration
const currentUrl = new URL(Astro.url.pathname, Astro.site);
const shareTitle = encodeURIComponent(post.data.title);
const shareText = encodeURIComponent(post.data.excerpt);
const shareUrl = encodeURIComponent(currentUrl.toString());

const socialLinks = {
  twitter: `https://twitter.com/intent/tweet?text=${shareTitle}&url=${shareUrl}`,
  linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${shareUrl}`,
  email: `mailto:?subject=${shareTitle}&body=${shareText}%0A%0A${shareUrl}`
};

// Accent color styles
const accentStyles = {
  blue: {
    tag: 'bg-brand-primary/10 text-brand-primary border-brand-primary/20 hover:bg-brand-primary/20',
    border: 'border-brand-primary/20',
    text: 'text-brand-primary',
    link: 'text-brand-primary hover:text-brand-primary/80'
  },
  gold: {
    tag: 'bg-brand-secondary/10 text-brand-secondary border-brand-secondary/20 hover:bg-brand-secondary/20',
    border: 'border-brand-secondary/20',
    text: 'text-brand-secondary',
    link: 'text-brand-secondary hover:text-brand-secondary/80'
  },
  green: {
    tag: 'bg-status-success/10 text-status-success border-status-success/20 hover:bg-status-success/20',
    border: 'border-status-success/20',
    text: 'text-status-success',
    link: 'text-status-success hover:text-status-success/80'
  }
};

const styles = accentStyles[accentColor];

// Category styling
const categoryStyles = {
  'Research': 'bg-purple-500/10 text-purple-400 border-purple-500/20',
  'Technical': 'bg-blue-500/10 text-blue-400 border-blue-500/20',
  'Reflection': 'bg-amber-500/10 text-amber-400 border-amber-500/20',
  'Resource': 'bg-green-500/10 text-green-400 border-green-500/20',
  'Tutorial': 'bg-cyan-500/10 text-cyan-400 border-cyan-500/20',
  'Update': 'bg-rose-500/10 text-rose-400 border-rose-500/20'
};
---

<footer class="mt-16 pt-12 border-t border-border-secondary">
  <!-- Tags and Category -->
  {(((post.data.tags ?? []).length > 0) || post.data.category) && (
    <div class="mb-8">
      <h3 class="text-sm font-medium text-content-secondary mb-4 font-mono uppercase tracking-wider">
        Filed Under
      </h3>
      <div class="flex flex-wrap items-center gap-2">
        <!-- Category -->
        {post.data.category && (
          <span class={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium border transition-colors ${categoryStyles[post.data.category] || 'bg-content-tertiary/10 text-content-tertiary border-content-tertiary/20'}`}>
            <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
            </svg>
            {post.data.category}
          </span>
        )}

        <!-- Tags -->
        {(post.data.tags ?? []).map((tag) => (
          <a
            href={`/posts?tag=${encodeURIComponent(tag)}`}
            class={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium border transition-all duration-200 ${styles.tag}`}
          >
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14"></path>
            </svg>
            {tag}
          </a>
        ))}
      </div>
    </div>
  )}

  <!-- Social Sharing -->
  <div class="mb-8">
    <h3 class="text-sm font-medium text-content-secondary mb-4 font-mono uppercase tracking-wider">
      Share This Post
    </h3>
    <div class="flex items-center gap-3">
      <!-- Twitter -->
      <a
        href={socialLinks.twitter}
        target="_blank"
        rel="noopener noreferrer"
        class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-content-secondary hover:text-content-primary bg-bg-secondary hover:bg-bg-tertiary border border-border-secondary hover:border-border-primary rounded-lg transition-all duration-200"
        aria-label="Share on Twitter"
      >
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
          <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
        </svg>
        Twitter
      </a>

      <!-- LinkedIn -->
      <a
        href={socialLinks.linkedin}
        target="_blank"
        rel="noopener noreferrer"
        class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-content-secondary hover:text-content-primary bg-bg-secondary hover:bg-bg-tertiary border border-border-secondary hover:border-border-primary rounded-lg transition-all duration-200"
        aria-label="Share on LinkedIn"
      >
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
          <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
        </svg>
        LinkedIn
      </a>

      <!-- Email -->
      <a
        href={socialLinks.email}
        class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-content-secondary hover:text-content-primary bg-bg-secondary hover:bg-bg-tertiary border border-border-secondary hover:border-border-primary rounded-lg transition-all duration-200"
        aria-label="Share via Email"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
        </svg>
        Email
      </a>

      <!-- Copy Link -->
      <button
        id="copyLinkBtn"
        data-url={currentUrl.toString()}
        class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-content-secondary hover:text-content-primary bg-bg-secondary hover:bg-bg-tertiary border border-border-secondary hover:border-border-primary rounded-lg transition-all duration-200"
        aria-label="Copy link to clipboard"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
        </svg>
        <span id="copyLinkText">Copy Link</span>
      </button>
    </div>
  </div>

  <!-- Related Posts -->
  {relatedPosts.length > 0 && (
    <div class="mb-8">
      <h3 class="text-sm font-medium text-content-secondary mb-4 font-mono uppercase tracking-wider">
        Related Posts
      </h3>
      <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {relatedPosts.map((relatedPost) => (
          <a
            href={`/posts/${relatedPost.id}`}
            class="group block p-4 bg-bg-secondary hover:bg-bg-tertiary border border-border-secondary hover:border-border-primary rounded-lg transition-all duration-200"
          >
            <!-- Type badge -->
            <div class="flex items-center gap-2 mb-2">
              {relatedPost.data.types.slice(0, 2).map((type) => (
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-content-tertiary/10 text-content-tertiary capitalize">
                  {type}
                </span>
              ))}
            </div>

            <!-- Title and excerpt -->
            <h4 class="font-medium text-content-primary group-hover:text-interactive-primary transition-colors mb-2 line-clamp-2">
              {relatedPost.data.title}
            </h4>
            <p class="text-sm text-content-tertiary line-clamp-2 mb-3">
              {relatedPost.data.excerpt}
            </p>

            <!-- Metadata -->
            <div class="flex items-center gap-3 text-xs text-content-tertiary font-mono">
              <time datetime={relatedPost.data.date.toISOString()}>
                {relatedPost.data.date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
              </time>
              {relatedPost.data.readingTime && (
                <>
                  <span>â€¢</span>
                  <span>{relatedPost.data.readingTime} min</span>
                </>
              )}
            </div>
          </a>
        ))}
      </div>
    </div>
  )}

  <!-- Navigation to section index -->
  <div class="pt-8 border-t border-border-secondary">
    <div class="flex items-center justify-between">
      <!-- Back to section -->
      <a
        href={post.data.types.includes('blog') ? '/blog' : post.data.types.includes('roadmap') ? '/roadmap' : post.data.types.includes('project') ? '/projects' : post.data.types.includes('literature') ? '/literature' : '/blog'}
        class={`inline-flex items-center gap-2 text-sm font-medium transition-colors ${styles.link}`}
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to {post.data.types.includes('blog') ? 'Blog' : post.data.types.includes('roadmap') ? 'Roadmap' : post.data.types.includes('project') ? 'Projects' : post.data.types.includes('literature') ? 'Literature' : 'Posts'}
      </a>

      <!-- Last updated -->
      {post.data.lastModified && (
        <div class="text-xs text-content-tertiary font-mono">
          Updated {post.data.lastModified.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
        </div>
      )}
    </div>
  </div>
</footer>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  // Copy link functionality
  document.addEventListener('DOMContentLoaded', () => {
    const copyBtn = document.getElementById('copyLinkBtn');
    const copyText = document.getElementById('copyLinkText');

    if (copyBtn && copyText) {
      copyBtn.addEventListener('click', async () => {
        const url = copyBtn.getAttribute('data-url');

        if (!url) return;

        try {
          await navigator.clipboard.writeText(url);

          // Update button text temporarily
          const originalText = copyText.textContent;
          copyText.textContent = 'Copied!';

          // Reset after 2 seconds
          setTimeout(() => {
            copyText.textContent = originalText;
          }, 2000);
        } catch (err) {
          console.error('Failed to copy URL:', err);

          // Fallback for older browsers
          const textArea = document.createElement('textarea');
          textArea.value = url;
          textArea.style.position = 'fixed';
          textArea.style.left = '-999999px';
          textArea.style.top = '-999999px';
          document.body.appendChild(textArea);
          textArea.focus();
          textArea.select();

          try {
            document.execCommand('copy');
            copyText.textContent = 'Copied!';
            setTimeout(() => {
              copyText.textContent = 'Copy Link';
            }, 2000);
          } catch (fallbackErr) {
            console.error('Fallback copy failed:', fallbackErr);
          }

          document.body.removeChild(textArea);
        }
      });
    }
  });
</script>
