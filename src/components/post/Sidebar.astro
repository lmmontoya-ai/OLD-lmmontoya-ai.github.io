---
// src/components/post/Sidebar.astro
// Sidebar component for post layout with navigation, search, and TOC

import type { Post } from "../../utils/content";
import TableOfContents from "./TableOfContents.astro";

interface Props {
  post: Post;
  relatedPosts: Post[];
  headings: Array<{ text: string; slug: string; depth: number }>;
  showToc?: boolean;
  accentColor?: string;
}

const {
  post,
  relatedPosts,
  headings,
  showToc = true,
  accentColor = "blue",
} = Astro.props;

// Determine accent color classes
const accentClasses = {
  blue: "border-brand-primary",
  gold: "border-brand-secondary",
  green: "border-status-success",
  red: "border-status-error",
  purple: "border-interactive-secondary",
} as const;

const sidebarAccentClass =
  accentClasses[accentColor as keyof typeof accentClasses] ||
  accentClasses.blue;

// Determine back link based on post type
const getBackLink = (post: Post) => {
  const primaryType = post.data.types[0];
  switch (primaryType) {
    case "roadmap":
      return { href: "/roadmap", label: "Back to Roadmap" };
    case "project":
      return { href: "/projects", label: "Back to Projects" };
    case "literature":
      return { href: "/literature", label: "Back to Literature" };
    case "guide":
      return { href: "/blog", label: "Back to Guides" };
    default:
      return { href: "/blog", label: "Back to Blog" };
  }
};

const backLink = getBackLink(post);
---

<aside
  class="hidden lg:block fixed left-0 top-14 h-[calc(100vh-3.5rem)] w-64 z-40 bg-bg-primary/95 backdrop-blur-md shadow-lg shadow-border-secondary/20 transform transition-transform duration-300 ease-out translate-x-0"
>
  <div class="h-full flex flex-col p-4 overflow-hidden">
    <!-- Header with elegant styling -->
    <div class="mb-4">
      <div class="flex items-center gap-2">
        <div class={`w-1 h-6 ${sidebarAccentClass} rounded-full opacity-80`}>
        </div>
        <h1
          class="text-xs font-mono font-medium text-content-tertiary/80 uppercase tracking-wider flex items-center gap-2"
        >
          Contents
        </h1>
      </div>
    </div>
    <!-- Scrollable content area -->
    <div class="flex-1 overflow-y-auto space-y-1 custom-scrollbar">
      <!-- Table of Contents with clean styling -->
      {
        showToc && (
          <div class="bg-bg-secondary/10 backdrop-blur-sm rounded-lg p-3">
            <TableOfContents
              headings={headings}
              variant="sidebar"
              className="!bg-transparent !border-none !p-0"
            />
          </div>
        )
      }

      <!-- Quick Navigation with clean styling -->
      <div class="bg-bg-secondary/10 backdrop-blur-sm rounded-lg p-3">
        <h3
          class="text-xs font-mono font-medium text-content-tertiary/80 uppercase tracking-wider mb-2 flex items-center gap-2"
        >
          <svg
            class="w-3 h-3"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13 10V3L4 14h7v7l9-11h-7z"></path>
          </svg>
          Navigate
        </h3>
        <div class="space-y-2">
          <a
            href={backLink.href}
            class="flex items-center gap-2 text-sm text-content-secondary hover:text-content-primary transition-spring group"
          >
            <svg
              class="w-3 h-3 group-hover:-translate-x-0.5 transition-spring"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            {backLink.label}
          </a>

          {
            relatedPosts.length > 0 && (
              <div class="pt-2 border-t border-secondary/30">
                <h4 class="text-xs font-mono font-medium text-content-tertiary/70 uppercase tracking-wider mb-2 flex items-center gap-1">
                  <svg
                    class="w-2.5 h-2.5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
                    />
                  </svg>
                  Related
                </h4>
                <div class="space-y-2">
                  {relatedPosts.slice(0, 3).map((relatedPost) => (
                    <a
                      href={`/posts/${relatedPost.id}`}
                      class="block text-sm text-content-secondary hover:text-content-primary transition-spring line-clamp-2 leading-relaxed group"
                    >
                      <span class="group-hover:text-brand-primary transition-spring">
                        {relatedPost.data.title}
                      </span>
                    </a>
                  ))}
                </div>
              </div>
            )
          }
        </div>
        <!-- Social share section -->
        <div class="bg-bg-secondary/10 backdrop-blur-sm rounded-lg p-3">
          <h3
            class="text-xs font-mono font-medium text-content-tertiary/80 uppercase tracking-wider mb-2 flex items-center gap-2"
          >
            <svg
              class="w-3 h-3"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"
              ></path>
            </svg>
            Share
          </h3>
          <div class="space-y-2">
            <button
              onclick="navigator.share ? navigator.share({title: this.dataset.title, url: this.dataset.url}) : navigator.clipboard.writeText(this.dataset.url)"
              data-title={post.data.title}
              data-url={`${Astro.site}/posts/${post.id}`}
              class="w-full flex items-center gap-2 text-sm text-content-secondary hover:text-brand-primary transition-spring p-1.5 rounded-lg hover:bg-bg-secondary/50"
            >
              <svg
                class="w-3.5 h-3.5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                ></path>
              </svg>
              Copy Link
            </button>

            {
              (post.data.project?.links?.github || post.data.github_link) && (
                <a
                  href={
                    post.data.project?.links?.github || post.data.github_link
                  }
                  target="_blank"
                  rel="noopener noreferrer"
                  class="w-full flex items-center gap-2 text-sm text-content-secondary hover:text-brand-primary transition-spring p-1.5 rounded-lg hover:bg-bg-secondary/50"
                >
                  <svg
                    class="w-3.5 h-3.5"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z" />
                  </svg>
                  View on GitHub
                </a>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Enhanced TOC active link tracking
    function updateActiveTocLink() {
      const headings = document.querySelectorAll("h2[id], h3[id]");
      const tocLinks = document.querySelectorAll("[data-toc-link]");

      if (!headings.length || !tocLinks.length) return;

      let activeHeading = null;
      const scrollPosition = window.scrollY + 100; // Offset for better UX

      // Find the currently visible heading
      for (let i = headings.length - 1; i >= 0; i--) {
        const heading = headings[i] as HTMLElement;
        if (heading.offsetTop <= scrollPosition) {
          activeHeading = heading;
          break;
        }
      }

      // Update TOC link states
      tocLinks.forEach((link) => {
        const linkElement = link as HTMLElement;
        const headingId = linkElement.getAttribute("data-heading-id");

        if (activeHeading && headingId === activeHeading.id) {
          linkElement.classList.add("text-content-primary", "font-medium");
          linkElement.classList.remove("text-content-secondary");
        } else {
          linkElement.classList.add("text-content-secondary");
          linkElement.classList.remove("text-content-primary", "font-medium");
        }
      });
    }

    // Share functionality
    function setupShareButton() {
      const shareButton = document.getElementById("share-post");
      if (!shareButton) return;

      shareButton.addEventListener("click", async () => {
        const title = shareButton.getAttribute("data-title") || document.title;
        const url =
          shareButton.getAttribute("data-url") || window.location.href;

        if (navigator.share) {
          try {
            await navigator.share({ title, url });
          } catch (err) {
            // Fallback to clipboard
            copyToClipboard(url);
          }
        } else {
          copyToClipboard(url);
        }
      });
    }

    function copyToClipboard(text: string) {
      navigator.clipboard.writeText(text).then(() => {
        // You could show a toast notification here
        console.log("URL copied to clipboard");
      });
    }

    // Initialize on page load
    document.addEventListener("DOMContentLoaded", () => {
      updateActiveTocLink();
      setupShareButton();

      // Update active link on scroll
      let ticking = false;
      window.addEventListener("scroll", () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            updateActiveTocLink();
            ticking = false;
          });
          ticking = true;
        }
      });
    });
  </script>
</aside>
