---
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
  variant?: "sidebar" | "mobile";
  title?: string;
  className?: string;
}

const {
  headings,
  variant = "sidebar",
  title = variant === "mobile" ? "Contents" : "On this page",
  className = "",
} = Astro.props;

// Create a tree structure for h2/h3 headings
const tocTree: (MarkdownHeading & { children: MarkdownHeading[] })[] = [];
let currentH2: (MarkdownHeading & { children: MarkdownHeading[] }) | null =
  null;

headings.forEach((h) => {
  if (h.depth === 2) {
    currentH2 = { ...h, children: [] };
    tocTree.push(currentH2);
  } else if (h.depth === 3 && currentH2) {
    currentH2.children.push(h);
  }
});

// Don't render if no h2 headings
if (tocTree.length === 0) {
  return null;
}

// Variant-specific classes
const containerClasses = {
  sidebar: "rounded-lg",
  mobile: "bg-bg-secondary backdrop-blur-lg border-t border-border-primary p-4",
};

const titleClasses = {
  sidebar: "sr-only", // Hide title in sidebar since parent handles it
  mobile:
    "text-sm font-mono font-medium text-content-tertiary uppercase tracking-wider mb-3",
};

const listClasses = {
  sidebar: "space-y-1",
  mobile: "flex gap-4 overflow-x-auto",
};

const itemClasses = {
  sidebar: "",
  mobile: "shrink-0",
};

const linkClasses = {
  sidebar:
    "block text-sm text-content-secondary hover:text-brand-primary transition-colors duration-200 py-1",
  mobile:
    "block text-sm text-content-secondary hover:text-content-primary transition-colors whitespace-nowrap",
};
---

<div class={`${containerClasses[variant]} ${className}`}>
  <h3 class={titleClasses[variant]}>{title}</h3>
  <nav>
    <ul class={listClasses[variant]}>
      {
        tocTree.map((h2) => (
          <li class={itemClasses[variant]}>
            {h2.children.length > 0 ? (
              <details class="group" data-toc-details>
                <summary class="flex items-center justify-between cursor-pointer list-none">
                  <a
                    href={`#${h2.slug}`}
                    class={`${linkClasses[variant]} font-medium flex-grow`}
                    data-toc-link
                    data-heading-id={h2.slug}
                  >
                    {h2.text}
                  </a>
                  <svg
                    class="w-4 h-4 text-content-tertiary group-open:rotate-90 transition-transform"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </summary>
                <ul class="pl-4 mt-1 space-y-1">
                  {h2.children.map((h3) => (
                    <li>
                      <a
                        href={`#${h3.slug}`}
                        class={`${linkClasses[variant]} text-xs opacity-80 font-mono`}
                        data-toc-link
                        data-heading-id={h3.slug}
                      >
                        <span class="inline-block w-2 h-2 rounded-full bg-brand-primary/40 mr-2" />
                        {h3.text}
                      </a>
                    </li>
                  ))}
                </ul>
              </details>
            ) : (
              <a
                href={`#${h2.slug}`}
                class={`${linkClasses[variant]} font-medium`}
                data-toc-link
                data-heading-id={h2.slug}
              >
                {h2.text}
              </a>
            )}
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<script>
  // Add smooth scrolling and active state management
  document.addEventListener("DOMContentLoaded", () => {
    const tocLinks = document.querySelectorAll("[data-toc-link]");
    const headings = document.querySelectorAll("h2, h3");

    // Smooth scroll to heading
    tocLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        // Prevent default if it's just the summary chevron
        if ((e.target as HTMLElement).tagName !== "A") {
          const summary = (e.target as HTMLElement).closest("summary");
          if (summary) {
            const details = summary.parentElement as HTMLDetailsElement;
            if (details) {
              details.open = !details.open;
              e.preventDefault();
              return;
            }
          }
        } else {
          e.preventDefault();
        }

        const targetId = link.getAttribute("data-heading-id");
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: "smooth",
              block: "start",
            });
            history.pushState(null, "", `#${targetId}`);
          }
        }
      });
    });

    // Intersection Observer for active state
    let activeId = "";

    const sixRemInPx =
      parseFloat(getComputedStyle(document.documentElement).fontSize) * 6;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            activeId = entry.target.id;
            updateActiveLink();
          }
        });
      },
      { rootMargin: `-${sixRemInPx}px 0px -60% 0px` }
    );

    // Observe all headings
    headings.forEach((heading) => {
      if (heading.id) observer.observe(heading);
    });

    function updateActiveLink() {
      const allDetails =
        document.querySelectorAll<HTMLDetailsElement>("[data-toc-details]");
      const activeLink = document.querySelector(
        `[data-toc-link][data-heading-id="${activeId}"]`
      );

      let activeDetailsParent: HTMLDetailsElement | null = null;
      if (activeLink) {
        activeDetailsParent = activeLink.closest("details");
      }

      // Close all details elements except for the active one's parent
      allDetails.forEach((details) => {
        if (details === activeDetailsParent) {
          if (!details.open) {
            details.open = true;
          }
        } else {
          if (details.open) {
            details.open = false;
          }
        }
      });

      tocLinks.forEach((link) => {
        const headingId = link.getAttribute("data-heading-id");
        const isActive = headingId === activeId;

        if (isActive) {
          link.classList.add("text-interactive-blue");
          link.classList.remove(
            "text-content-secondary",
            "text-content-primary",
            "font-medium"
          );
        } else {
          link.classList.add("text-content-secondary");
          link.classList.remove(
            "text-interactive-blue",
            "text-content-primary",
            "font-medium"
          );
        }
      });
    }

    // Handle initial active state based on URL hash
    const initialHash = window.location.hash.slice(1);
    if (initialHash) {
      activeId = initialHash;
      updateActiveLink();
    }
  });
</script>

<style>
  /* Custom scrollbar for mobile TOC */
  nav ul::-webkit-scrollbar {
    height: 4px;
  }

  nav ul::-webkit-scrollbar-track {
    background: oklch(var(--color-border-secondary) / 0.1);
    border-radius: 2px;
  }

  nav ul::-webkit-scrollbar-thumb {
    background: oklch(var(--color-content-tertiary) / 0.3);
    border-radius: 2px;
  }

  nav ul::-webkit-scrollbar-thumb:hover {
    background: oklch(var(--color-content-tertiary) / 0.5);
  }
</style>
