---
// Simple roadmap card component following project design principles
import type { CollectionEntry } from "astro:content";

interface Props {
  post: CollectionEntry<"posts">;
  showPhase?: boolean;
}

const { post, showPhase = false } = Astro.props;

// Get status styling following project card patterns
const getStatusStyling = (status: string) => {
  switch (status) {
    case "completed":
      return {
        badge: "bg-status-success/10 text-status-success",
        border: "hover:border-[rgb(var(--color-status-success))]/30",
        icon: "text-status-success",
        iconBg: "bg-status-success/10"
      };
    case "in-progress":
      return {
        badge: "bg-status-warning/10 text-status-warning",
        border: "hover:border-[rgb(var(--color-status-warning))]/30",
        icon: "text-status-warning",
        iconBg: "bg-status-warning/10"
      };
    case "planned":
      return {
        badge: "bg-interactive-blue/10 text-interactive-blue",
        border: "hover:border-[rgb(var(--color-interactive-blue))]/30",
        icon: "text-interactive-blue",
        iconBg: "bg-interactive-blue/10"
      };
    default:
      return {
        badge: "bg-subtle/10 text-subtle",
        border: "hover:border-[rgb(var(--color-border-subtle))]/30",
        icon: "text-subtle",
        iconBg: "bg-subtle/10"
      };
  }
};

const getStatusIcon = (status: string) => {
  switch (status) {
    case "completed":
      return "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z";
    case "in-progress":
      return "M12 6v6l4 2m6 2a9 9 0 11-18 0 9 9 0 0118 0z";
    case "planned":
      return "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2z";
    default:
      return "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z";
  }
};

const styling = getStatusStyling(post.data.status);
---

<article
  class={`
    bg-surface-primary rounded-xl border transition-all duration-300
    ${styling.border}
    p-4 h-full group relative
  `}
>
  <!-- Status Badge -->
  <div class="absolute top-4 right-4">
    <span class={`px-2 py-1 text-xs font-medium rounded-full ${styling.badge}`}>
      {post.data.status.replace("-", " ")}
    </span>
  </div>

  <!-- Phase Badge -->
  {
    showPhase && post.data.roadmap?.phase && (
      <div class="absolute top-4 left-4">
        <span class="px-2 py-1 text-xs font-medium rounded bg-surface-tertiary text-secondary">
          Phase {post.data.roadmap.phase}
        </span>
      </div>
    )
  }

  <!-- Icon -->
  <div class={`flex items-center justify-center w-10 h-10 rounded-lg ${styling.iconBg} mb-4 mt-8`}>
    <svg class={`w-5 h-5 ${styling.icon}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={getStatusIcon(post.data.status)}></path>
    </svg>
  </div>

  <!-- Content -->
  <div class="space-y-3">
    <!-- Date -->
    <time class="text-xs text-content-tertiary">
      {
        post.data.date.toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
          year: "numeric",
        })
      }
    </time>

    <!-- Title -->
    <h3 class="text-base font-semibold text-content-primary group-hover:text-interactive-blue transition-colors line-clamp-2">
      {post.data.title}
    </h3>

    <!-- Excerpt -->
    <p class="text-content-secondary text-sm mb-3 line-clamp-2 leading-snug">
      {post.data.excerpt}
    </p>

    <!-- Key Outcomes -->
    {
      post.data.roadmap?.outcomes && post.data.roadmap.outcomes.length > 0 && (
        <div class="mb-3">
          <h4 class="text-xs font-medium text-content-primary mb-1 uppercase tracking-wide">
            Key Outcomes
          </h4>
          <ul class="text-xs text-content-secondary space-y-0.5">
            {post.data.roadmap.outcomes.slice(0, 2).map((outcome) => (
              <li class="flex items-start gap-1">
                <span class="text-accent-green mt-0.5">â€¢</span>
                <span class="line-clamp-1">{outcome}</span>
              </li>
            ))}
          </ul>
        </div>
      )
    }

    <!-- Tags -->
    {
      post.data.tags && (
        <div class="flex flex-wrap gap-1 mt-auto">
          {post.data.tags.slice(0, 3).map((tag) => (
            <span class="px-1.5 py-0.5 text-xs bg-surface-secondary text-content-tertiary rounded">
              {tag}
            </span>
          ))}
          {post.data.tags.length > 3 && (
            <span class="px-1.5 py-0.5 text-xs text-content-tertiary">
              +{post.data.tags.length - 3}
            </span>
          )}
        </div>
      )
    }
  </div>
</article>
