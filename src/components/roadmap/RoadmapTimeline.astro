---
// Simple reusable roadmap timeline component
import type { CollectionEntry } from 'astro:content';

interface Props {
  posts: CollectionEntry<'posts'>[];
  showPhases?: boolean;
}

const { posts, showPhases = false } = Astro.props;

// Sort posts chronologically
const sortedPosts = posts.sort((a, b) => a.data.date.getTime() - b.data.date.getTime());

// Get status styling
const getStatusColor = (status: string) => {
  switch (status) {
    case 'completed': return 'text-green-600 bg-green-50 border-green-200';
    case 'in-progress': return 'text-blue-600 bg-blue-50 border-blue-200';
    case 'planned': return 'text-gray-600 bg-gray-50 border-gray-200';
    default: return 'text-gray-600 bg-gray-50 border-gray-200';
  }
};

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'completed': return 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z';
    case 'in-progress': return 'M12 6v6l4 2';
    case 'planned': return 'M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z';
    default: return '';
  }
};

const getStatusBgColor = (status: string) => {
  switch (status) {
    case 'completed': return 'bg-green-500';
    case 'in-progress': return 'bg-blue-500';
    case 'planned': return 'bg-gray-400';
    default: return 'bg-gray-400';
  }
};
---

<div class="roadmap-timeline">
  <div class="relative">
    <!-- Timeline line -->
    <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-interactive-blue via-secondary-purple to-accent-green"></div>
    
    {sortedPosts.map((post, index) => (
      <div class="relative flex items-start gap-6 pb-12 last:pb-0">
        <!-- Timeline dot -->
        <div class={`
          relative z-10 flex-shrink-0 w-16 h-16 rounded-full border-4 border-surface-primary
          ${getStatusBgColor(post.data.status)}
          flex items-center justify-center
        `}>
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={getStatusIcon(post.data.status)}></path>
          </svg>
        </div>
        
        <!-- Content card -->
        <div class="flex-1 min-w-0">
          <a href={`/posts/${post.id}`} class="block group">
            <article class="bg-surface-primary rounded-lg border hover:border-interactive-blue transition-colors p-6">
              <header class="mb-4">
                <div class="flex items-center gap-3 mb-2 flex-wrap">
                  <span class={`
                    px-2 py-1 text-xs font-medium rounded-full
                    ${getStatusColor(post.data.status)}
                  `}>
                    {post.data.status.replace('-', ' ')}
                  </span>
                  {showPhases && post.data.roadmap?.phase && (
                    <span class="px-2 py-1 text-xs font-medium rounded-full bg-surface-secondary text-content-secondary">
                      Phase {post.data.roadmap.phase}
                    </span>
                  )}
                  <time class="text-sm text-content-tertiary">
                    {post.data.date.toLocaleDateString('en-US', { 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    })}
                  </time>
                </div>
                <h2 class="text-xl font-semibold text-content-primary group-hover:text-interactive-blue transition-colors">
                  {post.data.title}
                </h2>
              </header>
              
              <p class="text-content-secondary mb-4 leading-relaxed">
                {post.data.excerpt}
              </p>
              
              {post.data.roadmap?.outcomes && (
                <div class="mb-4">
                  <h4 class="text-sm font-medium text-content-primary mb-2">Key Outcomes:</h4>
                  <ul class="text-sm text-content-secondary space-y-1">
                    {post.data.roadmap.outcomes.slice(0, 3).map(outcome => (
                      <li class="flex items-start gap-2">
                        <span class="text-green-500 mt-1 text-xs">â€¢</span>
                        <span>{outcome}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              
              {post.data.tags && (
                <div class="flex flex-wrap gap-2">
                  {post.data.tags.slice(0, 4).map(tag => (
                    <span class="px-2 py-1 text-xs bg-surface-secondary text-content-tertiary rounded-md">
                      {tag}
                    </span>
                  ))}
                </div>
              )}
            </article>
          </a>
        </div>
      </div>
    ))}
  </div>
</div>
