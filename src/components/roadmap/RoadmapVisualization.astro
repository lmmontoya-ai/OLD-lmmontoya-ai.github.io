---
// src/components/roadmap/RoadmapVisualization.astro
import type { CollectionEntry } from 'astro:content';
import { cn } from '../../utils/variants';

interface Props {
  posts: CollectionEntry<'posts'>[];
}

const { posts } = Astro.props;

// Group posts by phase
const phases = posts.reduce((acc, post) => {
  const phase = post.data.roadmap?.phase || 0;
  if (!acc[phase]) acc[phase] = [];
  acc[phase].push(post);
  return acc;
}, {} as Record<number, typeof posts>);

// Sort phases
const sortedPhases = Object.keys(phases)
  .map(Number)
  .sort((a, b) => a - b);

// Calculate SVG dimensions
const width = sortedPhases.length * 400 + 200;
const height = 600;
---

<div class="roadmap-container">
  <!-- Desktop Visualization -->
  <div class="hidden md:block roadmap-scroll">
    <svg
      width={width}
      height={height}
      class="roadmap-svg"
      viewBox={`0 0 ${width} ${height}`}
    >
      <!-- Background grid -->
      <defs>
        <pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse">
          <path
            d="M 50 0 L 0 0 0 50"
            fill="none"
            stroke="currentColor"
            stroke-width="0.5"
            opacity="0.1"
          />
        </pattern>
      </defs>
      <rect width={width} height={height} fill="url(#grid)" />

      <!-- Phase columns -->
      {sortedPhases.map((phase, phaseIndex) => {
        const phasePosts = phases[phase];
        return (
          <g class="phase-group">
            <!-- Phase background -->
            <rect
              x={phaseIndex * 400}
              y="0"
              width="400"
              height={height}
              fill="currentColor"
              opacity="0.02"
              class="phase-bg"
            />

            <!-- Phase title -->
            <text
              x={phaseIndex * 400 + 200}
              y="40"
              text-anchor="middle"
              class="text-lg font-semibold fill-primary"
            >
              Phase {phase}
            </text>

            <!-- Posts in phase -->
            {phasePosts.map((post, index) => {
              const x = phaseIndex * 400 + 200;
              const y = 100 + index * 120;

              return (
                <g class="roadmap-node group">
                  <!-- Connection lines to dependencies -->
                  {post.data.roadmap?.dependencies?.map(dep => {
                    const depPost = posts.find(p => p.data.slug === dep);
                    if (depPost && depPost.data.roadmap) {
                      const depPhaseIndex = sortedPhases.indexOf(depPost.data.roadmap.phase);
                      const depX = depPhaseIndex * 400 + 200;
                      const depPhasePosts = phases[depPost.data.roadmap.phase];
                      const depIndex = depPhasePosts.findIndex(p => p.data.slug === dep);
                      const depY = 100 + depIndex * 120;

                      return (
                        <path
                          d={`M ${depX + 150} ${depY} Q ${(depX + x) / 2} ${(depY + y) / 2} ${x - 150} ${y}`}
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          opacity="0.2"
                          class="connection-line"
                        />
                      );
                    }
                    return null;
                  })}

                  <!-- Node circle -->
                  <circle
                    cx={x}
                    cy={y}
                    r="60"
                    class={cn(
                      "roadmap-circle",
                      post.data.status === 'completed' && "fill-status-success",
                      post.data.status === 'in-progress' && "fill-status-warning",
                      post.data.status === 'planned' && "fill-surface-secondary"
                    )}
                    stroke="currentColor"
                    stroke-width="2"
                    opacity="0.1"
                  />

                  <!-- Node content -->
                  <foreignObject x={x - 150} y={y - 50} width="300" height="100">
                    <a
                      href={`/posts/${post.data.slug}`}
                      class="roadmap-node-content"
                    >
                      <div class="bg-surface-secondary/90 backdrop-blur-sm rounded-lg p-4 border border-primary hover:border-interactive-blue transition-theme">
                        <h3 class="font-semibold text-sm text-primary mb-1 line-clamp-2">
                          {post.data.title}
                        </h3>
                        <p class="text-xs text-secondary line-clamp-2">
                          {post.data.excerpt}
                        </p>
                      </div>
                    </a>
                  </foreignObject>

                  <!-- Progress indicator -->
                  {post.data.status === 'in-progress' && (
                    <circle
                      cx={x}
                      cy={y}
                      r="65"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-dasharray="4 2"
                      opacity="0.3"
                      class="animate-spin-slow"
                    />
                  )}
                </g>
              );
            })}
          </g>
        );
      })}
    </svg>
  </div>

  <!-- Mobile List View -->
  <div class="md:hidden">
    {sortedPhases.map((phase) => {
      const phasePosts = phases[phase];
      return (
        <div class="mb-8">
          <h3 class="text-lg font-semibold text-primary mb-4 sticky top-20 bg-surface-primary/90 backdrop-blur-sm py-2">
            Phase {phase}
          </h3>
          <div class="space-y-4">
            {phasePosts.map(post => (
              <a
                href={`/posts/${post.data.slug}`}
                class="block"
              >
                <div class={cn(
                  "p-4 rounded-lg border-l-4 bg-surface-secondary",
                  post.data.status === 'completed' && "border-l-status-success",
                  post.data.status === 'in-progress' && "border-l-status-warning",
                  post.data.status === 'planned' && "border-l-tertiary"
                )}>
                  <h4 class="font-semibold text-primary mb-1">
                    {post.data.title}
                  </h4>
                  <p class="text-sm text-secondary">
                    {post.data.excerpt}
                  </p>
                  {post.data.roadmap?.dependencies && post.data.roadmap.dependencies.length > 0 && (
                    <div class="mt-2 text-xs text-tertiary">
                      Prerequisites: {post.data.roadmap.dependencies.join(', ')}
                    </div>
                  )}
                </div>
              </a>
            ))}
          </div>
        </div>
      );
    })}
  </div>
</div>

<style>
  .roadmap-container {
    @apply relative;
  }

  .roadmap-scroll {
    @apply overflow-x-auto overflow-y-hidden;
    @apply border border-primary rounded-lg;
    @apply bg-surface-secondary/20;
  }

  .roadmap-svg {
    @apply min-w-full;
  }

  @keyframes spin-slow {
    to { transform: rotate(360deg); }
  }

  .animate-spin-slow {
    animation: spin-slow 20s linear infinite;
  }

  .roadmap-node:hover .roadmap-circle {
    opacity: 0.2;
    transform: scale(1.05);
  }

  .connection-line {
    transition: opacity 0.3s ease;
  }

  .phase-group:hover .connection-line {
    opacity: 0.4;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>