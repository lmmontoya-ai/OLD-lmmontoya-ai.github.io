---
// src/components/ui/Button.astro
// Reusable button component with primary/secondary variants and consistent styling
// Now using pure Tailwind utilities instead of custom CSS classes

interface Props {
  href?: string;
  variant?: "primary" | "secondary" | "outline";
  size?: "sm" | "md" | "lg";
  class?: string;
  rounded?: boolean;
  ariaLabel?: string;
  fullWidth?: boolean;
  type?: "button" | "submit" | "reset";
}

const {
  href,
  variant = "primary",
  size = "md",
  class: className = "",
  rounded = false,
  ariaLabel,
  fullWidth = false,
  type = "button",
} = Astro.props;

// Base classes using Tailwind utilities
const baseClasses = [
  "inline-flex",
  "items-center", 
  "justify-center",
  "font-semibold",
  "font-heading",
  "tracking-tight",
  "relative",
  "overflow-hidden",
  "transition-all",
  "duration-spring",
  "focus:outline-none",
  "focus-visible:ring-2",
  "focus-visible:ring-offset-2",
].join(" ");

// Size classes using Tailwind utilities
const sizeClasses = {
  sm: "text-sm px-3 py-1.5 rounded-lg",
  md: "px-4 py-2 rounded-lg",
  lg: "text-lg px-6 py-3 rounded-xl",
}[size];

// Variant classes using Tailwind utilities and CSS variables for theme compatibility
const variantClasses = {
  primary: [
    // Background and text (background set via inline style for CSS variable)
    "text-slate-900",
    "border",
    "border-transparent",
    "shadow-themed-sm",
    "focus-visible:ring-amber-500",
    // Hover effects
    "hover:-translate-y-0.5",
    "hover:brightness-105",
    "hover:shadow-themed-lg",
    // Active state
    "active:-translate-y-px",
    "active:transition-all",
    "active:duration-100",
  ].join(" "),
  
  secondary: [
    // Background and text
    "bg-transparent",
    "text-white",
    "border-2",
    "border-white/50",
    "backdrop-blur-button",
    "focus-visible:ring-blue-500",
    // Hover effects
    "hover:text-blue-500",
    "hover:border-blue-500",
    "hover:bg-blue-500/5",
    "hover:-translate-y-px",
    "hover:shadow-themed-md",
  ].join(" "),
  
  outline: [
    // Background and text
    "bg-transparent",
    "text-themed-secondary",
    "border",
    "border-slate-500/20",
    "focus-visible:ring-blue-500",
    // Hover effects
    "hover:border-blue-500/30",
    "hover:text-themed",
    "hover:-translate-y-px",
  ].join(" "),
}[variant];

// Optional classes
const roundedClasses = rounded ? "rounded-full" : "";
const widthClasses = fullWidth ? "w-full" : "";

// Combine all classes
const classes = [
  baseClasses,
  sizeClasses,
  variantClasses,
  roundedClasses,
  widthClasses,
  className,
]
  .filter(Boolean)
  .join(" ");

// Determine which element to render
const Element = href ? "a" : "button";

// Special styling for primary variant background
const isPrimary = variant === "primary";
---

<Element
  href={href}
  class={classes}
  aria-label={ariaLabel}
  type={!href ? type : undefined}
  {...href ? { target: href.startsWith("http") ? "_blank" : undefined } : {}}
  {...href
    ? { rel: href.startsWith("http") ? "noopener noreferrer" : undefined }
    : {}}
>
  {isPrimary && (
    <!-- Theme-aware background for primary buttons -->
          <div class="absolute inset-0 dark:block hidden" style="background-color: rgb(212 175 55);"></div>
      <div class="absolute inset-0 dark:hidden block" style="background-color: rgb(208 124 92);"></div>
  )}
  {isPrimary && (
    <!-- Hover glow effect for primary buttons -->
    <div 
      class="absolute inset-0 transition-all duration-spring opacity-0 hover:opacity-100"
      style="box-shadow: var(--glow-highlight), var(--shadow-lg);"
    ></div>
  )}
  
  <!-- Button content - Added flex and items-center to keep text and icons on same line -->
  <span class="relative z-10 flex items-center">
    <slot />
  </span>
</Element>