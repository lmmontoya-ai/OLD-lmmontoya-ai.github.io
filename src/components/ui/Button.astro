---
// src/components/ui/Button.astro
// Reusable button component with primary/secondary variants and consistent styling
// Now using class-variance-authority for variant management

import { buttonVariants, cn, type ButtonVariants } from "../../utils/variants";

interface Props extends ButtonVariants {
  href?: string;
  class?: string;
  ariaLabel?: string;
  type?: "button" | "submit" | "reset";
}

const {
  href,
  variant = "primary",
  size = "md",
  fullWidth = false,
  rounded = false,
  class: className = "",
  ariaLabel,
  type = "button",
} = Astro.props;

// Generate classes using CVA
const classes = cn(
  buttonVariants({ variant, size, fullWidth, rounded }),
  className
);

// Determine which element to render
const Element = href ? "a" : "button";

// Check if this is a primary variant for special styling
const isPrimary = variant === "primary";
---

<Element
  href={href}
  class={classes}
  aria-label={ariaLabel}
  type={!href ? type : undefined}
  {...href ? { target: href.startsWith("http") ? "_blank" : undefined } : {}}
  {...href
    ? { rel: href.startsWith("http") ? "noopener noreferrer" : undefined }
    : {}}
>
  {isPrimary && (
    <!-- Theme-aware background for primary buttons -->
    <div class="absolute inset-0 dark:block hidden" style="background-color: rgb(212 175 55);"></div>
    <div class="absolute inset-0 dark:hidden block" style="background-color: rgb(208 124 92);"></div>
  )}
  {isPrimary && (
    <!-- Hover glow effect for primary buttons -->
    <div 
      class="absolute inset-0 transition-all duration-spring opacity-0 hover:opacity-100"
      style="box-shadow: var(--glow-highlight), var(--shadow-lg);"
    ></div>
  )}
  
  <!-- Button content - Added flex and items-center to keep text and icons on same line -->
  <span class="relative z-10 flex items-center">
    <slot />
  </span>
</Element>