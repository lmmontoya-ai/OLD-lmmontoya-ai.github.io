---
interface Props {
  placeholder?: string;
  class?: string;
}

const { placeholder = "Search...", class: className = "" } = Astro.props;
---

<div class={`relative ${className}`}>
  <input
    type="search"
    id="post-search"
    placeholder={placeholder}
    class="w-full px-4 py-2 pl-10 text-sm bg-surface-secondary border border-primary rounded-lg
           placeholder:text-tertiary text-primary
           focus:outline-none focus:border-interactive-blue focus:ring-1 focus:ring-interactive-blue/20
           transition-spring"
  />

  <svg
    class="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-tertiary pointer-events-none"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
    />
  </svg>

  <!-- Clear button -->
  <button
    id="clear-search"
    class="absolute right-2 top-1/2 -translate-y-1/2 p-1 rounded-md
           text-tertiary hover:text-primary transition-theme
           opacity-0 pointer-events-none"
    aria-label="Clear search"
  >
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
    </svg>
  </button>
</div>

<script>
  import Fuse from 'fuse.js';

  // Initialize search functionality
  document.addEventListener('astro:page-load', async () => {
    const searchInput = document.getElementById('post-search') as HTMLInputElement;
    const clearButton = document.getElementById('clear-search');

    if (!searchInput) return;

    let posts: any[] = [];

    // Fetch all posts for searching (gracefully handle missing API)
    try {
      const response = await fetch('/api/posts.json');
      if (response.ok) {
        posts = await response.json();
      } else {
        console.warn('Search API not available, search functionality disabled');
        return;
      }
    } catch (error) {
      console.warn('Search API not available, search functionality disabled');
      return;
    }

    // Configure Fuse.js
    const fuse = new Fuse(posts, {
      keys: [
        { name: 'title', weight: 0.3 },
        { name: 'excerpt', weight: 0.2 },
        { name: 'tags', weight: 0.2 },
        { name: 'category', weight: 0.15 },
        { name: 'content', weight: 0.15 },
      ],
      threshold: 0.3,
      includeScore: true,
    });

    // Handle search input
    searchInput.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value;

      // Show/hide clear button
      if (clearButton) {
        clearButton.classList.toggle('opacity-0', !query);
        clearButton.classList.toggle('pointer-events-none', !query);
        clearButton.classList.toggle('opacity-100', !!query);
        clearButton.classList.toggle('pointer-events-auto', !!query);
      }

      // Perform search
      if (query) {
        const results = fuse.search(query);
        window.dispatchEvent(new CustomEvent('search-results', {
          detail: { results: results.map(r => r.item) }
        }));
      } else {
        window.dispatchEvent(new CustomEvent('search-results', {
          detail: { results: posts }
        }));
      }
    });

    // Handle clear button
    clearButton?.addEventListener('click', () => {
      searchInput.value = '';
      searchInput.dispatchEvent(new Event('input'));
      searchInput.focus();
    });

    // Handle keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Focus search on Ctrl/Cmd + K
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        searchInput.focus();
      }

      // Clear on Escape
      if (e.key === 'Escape' && document.activeElement === searchInput) {
        searchInput.value = '';
        searchInput.dispatchEvent(new Event('input'));
        searchInput.blur();
      }
    });
  });
</script>
