---
// Enhanced ThemeToggle.astro
// Improved theme toggle with better visual feedback and animations
---

<button
  id="themeToggle"
  class="relative inline-flex items-center justify-center w-11 h-11 rounded-xl transition-theme-all bg-secondary/50 hover:bg-secondary/80 backdrop-blur-md text-content-secondary hover:text-interactive-primary transform-gpu hover:scale-105 focus-ring group overflow-hidden"
  title="Toggle dark/light mode"
  aria-label="Toggle dark/light mode"
>
  <!-- Background gradient on hover -->
  <div
    class="absolute inset-0 rounded-xl bg-gradient-to-br from-interactive-primary/5 to-interactive-secondary/5 opacity-0 transition-theme-opacity group-hover:opacity-100"
  >
  </div>

  <!-- Sun icon for light mode -->
  <svg
    xmlns="http://www.w3.org/2000/svg"
    id="sun-icon"
    class="absolute w-5 h-5 transition-theme-all transform-gpu"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    stroke-width="2"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <path
      d="M12 1v2m0 18v2M4.22 4.22l1.42 1.42m12.72 12.72l1.42 1.42M1 12h2m18 0h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"
    ></path>
  </svg>

  <!-- Moon icon for dark mode -->
  <svg
    xmlns="http://www.w3.org/2000/svg"
    id="moon-icon"
    class="absolute w-5 h-5 transition-theme-all transform-gpu"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    stroke-width="2"
  >
    <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"></path>
  </svg>

  <!-- Visual indicator ring -->
  <div
    class="absolute inset-0 rounded-xl border-2 border-transparent group-hover:border-interactive-primary/20 transition-theme-all"
  >
  </div>

  <!-- Ripple effect on click -->
  <div
    id="ripple-effect"
    class="absolute inset-0 rounded-xl bg-interactive-primary/20 scale-0 transition-transform duration-300 ease-out opacity-0"
  >
  </div>
</button>

<script>
  // Enhanced theme toggle with improved animations and state management
  class ThemeToggle {
    private button: HTMLElement | null;
    private sunIcon: HTMLElement | null;
    private moonIcon: HTMLElement | null;
    private rippleEffect: HTMLElement | null;

    constructor() {
      this.button = document.getElementById("themeToggle");
      this.sunIcon = document.getElementById("sun-icon");
      this.moonIcon = document.getElementById("moon-icon");
      this.rippleEffect = document.getElementById("ripple-effect");

      this.init();
    }

    init() {
      // Set initial icon visibility
      this.updateIconVisibility();

      // Add click event listener
      this.button?.addEventListener("click", () => this.toggleTheme());

      // Listen for theme changes (for external theme changes)
      const observer = new MutationObserver(() => this.updateIconVisibility());
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }

    toggleTheme() {
      // Create ripple effect
      this.createRippleEffect();

      // Toggle the theme
      const isDark = document.documentElement.classList.contains("dark");
      const newTheme = isDark ? "light" : "dark";

      // Add transition class to body for smooth theme transition
      document.body.style.transition =
        "background-color 0.3s ease, color 0.3s ease";

      // Update DOM
      if (newTheme === "dark") {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }

      // Save to localStorage
      localStorage.setItem("theme", newTheme);

      // Update icon visibility with animation
      setTimeout(() => this.updateIconVisibility(), 50);

      // Remove transition after theme change completes
      setTimeout(() => {
        document.body.style.transition = "";
      }, 300);
    }

    updateIconVisibility() {
      const isDark = document.documentElement.classList.contains("dark");

      if (this.sunIcon && this.moonIcon) {
        if (isDark) {
          // Show moon, hide sun (dark mode active)
          this.sunIcon.style.transform = "rotate(180deg) scale(0)";
          this.sunIcon.style.opacity = "0";
          this.moonIcon.style.transform = "rotate(0deg) scale(1)";
          this.moonIcon.style.opacity = "1";
        } else {
          // Show sun, hide moon (light mode active)
          this.sunIcon.style.transform = "rotate(0deg) scale(1)";
          this.sunIcon.style.opacity = "1";
          this.moonIcon.style.transform = "rotate(-180deg) scale(0)";
          this.moonIcon.style.opacity = "0";
        }
      }
    }

    createRippleEffect() {
      if (this.rippleEffect) {
        // Reset animation
        this.rippleEffect.style.transform = "scale(0)";
        this.rippleEffect.style.opacity = "1";

        // Trigger reflow
        this.rippleEffect.offsetHeight;

        // Start animation
        this.rippleEffect.style.transform = "scale(1.5)";
        this.rippleEffect.style.opacity = "0";

        // Reset after animation
        setTimeout(() => {
          if (this.rippleEffect) {
            this.rippleEffect.style.transform = "scale(0)";
            this.rippleEffect.style.opacity = "0";
          }
        }, 300);
      }
    }
  }

  // Initialize theme toggle when DOM is ready
  function initThemeToggle() {
    new ThemeToggle();
  }

  // Initialize on different page load events
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initThemeToggle);
  } else {
    initThemeToggle();
  }

  // Also initialize on Astro page transitions
  document.addEventListener("astro:page-load", initThemeToggle);
</script>

<style>
  /* Enhanced icon transitions */
  #sun-icon,
  #moon-icon {
    transition:
      transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1),
      opacity 0.3s ease;
  }

  /* Initial state - sun visible in light mode, moon visible in dark mode */
  :not(.dark) #sun-icon {
    transform: rotate(0deg) scale(1);
    opacity: 1;
  }

  :not(.dark) #moon-icon {
    transform: rotate(-180deg) scale(0);
    opacity: 0;
  }

  .dark #sun-icon {
    transform: rotate(180deg) scale(0);
    opacity: 0;
  }

  .dark #moon-icon {
    transform: rotate(0deg) scale(1);
    opacity: 1;
  }

  /* Button hover effects */
  #themeToggle:hover {
    box-shadow: 0 4px 12px rgba(var(--color-interactive-primary), 0.15);
  }

  .dark #themeToggle:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
</style>
