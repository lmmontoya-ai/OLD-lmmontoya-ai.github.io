---
import { formatRelativeDate } from "../../utils/dateUtils";
import { iconPaths } from "../../utils/iconPaths";

// src/components/ui/UpdateCard.astro
// Reusable component for displaying latest update cards with consistent styling
// Now using pure Tailwind utilities instead of custom CSS classes

interface Props {
  title: string;
  date: string;
  tag: string;
  description?: string;
  href: string;
  icon: "roadmap" | "project" | "literature";
  variant: "milestone" | "project" | "resource";
}

const { title, date, tag, description, href, icon, variant } = Astro.props;

// Base update card classes using Tailwind utilities
const baseCardClasses = [
  "relative",
  "block",
  "group",
  "p-4",
  "px-5",
  "rounded-xl",
  "m-px",
  "transition-all",
  "duration-base",
  "focus-visible:outline",
  "focus-visible:outline-2",
  "focus-visible:outline-blue-500",
  "focus-visible:outline-offset-2",
  // Hover effects
  "hover:translate-x-1",
].join(" ");

// Variant-specific hover background
const hoverBgClasses = {
  milestone: "", // Will be set with inline styles for theme awareness
  project: "hover:bg-blue-500/3",
  resource: "hover:bg-emerald-500/3",
}[variant];

// Icon container classes
const iconBaseClasses = [
  "flex",
  "items-center",
  "justify-center",
  "w-9",
  "h-9",
  "flex-shrink-0",
  "relative",
  "transition-all",
  "duration-spring",
  // Removed background, border radius, and overflow for clean icon look
].join(" ");

// Icon variant classes - just color, no background
const iconVariantClasses = {
  milestone: "", // Will be set with inline styles for theme awareness
  project: "text-blue-500",
  resource: "text-emerald-500",
}[variant];

// Tag classes
const tagBaseClasses = [
  "font-mono",
  "text-caption",
  "font-medium",
  "tracking-wide",
  "uppercase",
  "inline-block",
  "mb-1.5",
  "transition-all",
  "duration-base",
  // Removed border and background for cleaner look like original
].join(" ");

// Tag variant classes - much more subtle styling like original
const tagVariantClasses = {
  milestone: "", // Will be set with inline styles for theme awareness
  project: "text-blue-500",
  resource: "text-emerald-500",
}[variant];

// Title hover color classes - variant-specific
const titleHoverClasses = {
  milestone: "", // Will be set with inline styles for theme awareness
  project: "group-hover:text-blue-500",
  resource: "group-hover:text-emerald-500",
}[variant];

// Left border indicator color - theme-aware for milestone
const borderColor = {
  milestone: "", // Will be set with conditional rendering for theme awareness
  project: "rgb(59, 130, 246)", // --color-accent
  resource: "rgb(34, 197, 94)", // --color-success
}[variant];
---

<a href={href} class={`${baseCardClasses} ${hoverBgClasses}`}>
  {variant === "milestone" && (
    <>
      <!-- Theme-aware hover background for milestone cards -->
        <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 dark:block hidden" style="background-color: rgba(212, 175, 55, 0.03);"></div>
  <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 dark:hidden block" style="background-color: rgba(208, 124, 92, 0.03);"></div>
    </>
  )}
  <!-- Left border indicator (recreating ::before pseudo-element) -->
  {
    variant === "milestone" ? (
      <>
        <div
          class="absolute left-0 top-0 bottom-0 w-0.5 rounded-r-sm transform scale-y-0 origin-center transition-transform duration-300 group-hover:scale-y-100 dark:block hidden"
          style="background-color: rgb(212, 175, 55);"
        />
        <div
          class="absolute left-0 top-0 bottom-0 w-0.5 rounded-r-sm transform scale-y-0 origin-center transition-transform duration-300 group-hover:scale-y-100 dark:hidden block"
          style="background-color: rgb(208, 124, 92);"
        />
      </>
    ) : (
      <div
        class="absolute left-0 top-0 bottom-0 w-0.5 rounded-r-sm transform scale-y-0 origin-center transition-transform duration-300 group-hover:scale-y-100"
        style={`background-color: ${borderColor};`}
      />
    )
  }

  <div class="flex items-center gap-3">
    <div class={`${iconBaseClasses} ${iconVariantClasses}`}>
      {
        variant === "milestone" ? (
          <>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4 dark:block hidden"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              stroke-width="2"
              style="color: rgb(212, 175, 55);"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d={iconPaths[icon]}
              />
            </svg>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4 dark:hidden block"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              stroke-width="2"
              style="color: rgb(208, 124, 92);"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d={iconPaths[icon]}
              />
            </svg>
          </>
        ) : (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d={iconPaths[icon]}
            />
          </svg>
        )
      }
    </div>

    <div class="min-w-0 flex-1">
      <div class={`${tagBaseClasses} ${tagVariantClasses}`}>
        {
          variant === "milestone" ? (
            <>
              <span
                class="dark:inline hidden"
                style="color: rgb(212, 175, 55);"
              >
                {tag}
              </span>
              <span
                class="dark:hidden inline"
                style="color: rgb(208, 124, 92);"
              >
                {tag}
              </span>
            </>
          ) : (
            tag
          )
        }
      </div>

      <h4
        class={`font-semibold text-themed mb-1.5 font-sans leading-tight transition-colors duration-200 text-base ${titleHoverClasses}`}
      >
        {
          variant === "milestone" ? (
            <span class="group-hover:text-blue-500">{title}</span>
          ) : (
            title
          )
        }
      </h4>

      {
        description && (
          <p class="text-themed-secondary text-sm mb-2 leading-relaxed font-body line-clamp-2">
            {description}
          </p>
        )
      }

      <div
        class="text-xs text-themed-secondary font-mono opacity-75 group-hover:opacity-100 transition-opacity duration-200"
      >
        <time datetime={date} class="tabular-nums font-medium">
          {date}
        </time>
        <span class="opacity-60 mx-1.5">â€¢</span>
        <span class="opacity-80">
          {formatRelativeDate(date)}
        </span>
      </div>
    </div>
  </div>
</a>
