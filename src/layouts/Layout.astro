---
import "../styles/global.css";

import Header from "../components/layout/Header.astro";
import Footer from "../components/layout/Footer.astro";
import { ClientRouter } from "astro:transitions";

export interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = "Luis Miguel Montoya's journey from physicist to AI interpretability researcher",
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;500&family=IBM+Plex+Sans:wght@400;500;600&family=Inter:wght@500;600;700&display=swap"
      rel="stylesheet"
    />

    <ClientRouter />

    <!-- Critical theme initialization - prevent flash of wrong theme -->
    <script is:inline>
      // This script must run immediately and synchronously to prevent flash
      (function () {
        function getStoredTheme() {
          if (typeof localStorage !== "undefined") {
            return localStorage.getItem("theme");
          }
          return null;
        }

        function getSystemTheme() {
          if (typeof window !== "undefined" && window.matchMedia) {
            return window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "light";
          }
          return "light";
        }

        function applyTheme() {
          // Always check localStorage first, then system preference
          const storedTheme = getStoredTheme();
          const theme = storedTheme || getSystemTheme();

          // Apply theme immediately to prevent flash
          const root = document.documentElement;
          if (theme === "dark") {
            root.classList.add("dark");
          } else {
            root.classList.remove("dark");
          }

          // Only store if not already stored
          if (typeof localStorage !== "undefined" && !storedTheme) {
            localStorage.setItem("theme", theme);
          }
        }

        // Apply theme immediately on initial load
        applyTheme();

        // Handle view transitions - preserve theme during navigation
        document.addEventListener("astro:before-swap", (event) => {
          // Get current theme before swap
          const currentTheme = getStoredTheme() || getSystemTheme();

          // Apply to the new document
          if (currentTheme === "dark") {
            event.newDocument.documentElement.classList.add("dark");
          } else {
            event.newDocument.documentElement.classList.remove("dark");
          }
        });

        // Also ensure theme is applied after swap
        document.addEventListener("astro:after-swap", applyTheme);
      })();
    </script>

    <!-- Add CSS to prevent any initial flash -->
    <style>
      /* Prevent flash of unstyled content during theme transitions */
      html {
        color-scheme: light;
      }
      html.dark {
        color-scheme: dark;
      }

      /* Apply smooth color transitions to all text elements */
      * {
        transition: color 0.15s ease;
      }

      /* Apply background and border transitions only to specific UI elements */
      .bg-surface,
      .bg-surface-secondary,
      .bg-surface-tertiary,
      .border-border-primary,
      .border-secondary,
      button,
      .card,
      nav,
      header,
      footer,
      aside {
        transition:
          background-color 0.2s ease,
          border-color 0.2s ease,
          color 0.15s ease;
      }

      /* Prevent background transitions on content elements that might cause flickering */
      p,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      span,
      div,
      article {
        transition: color 0.15s ease;
      }
    </style>
  </head>
  <body class="bg-surface text-primary">
    <!-- Subtle grid overlay for technical aesthetic -->
    <div
      class="fixed inset-0 bg-grid-pattern opacity-[0.02] dark:opacity-[0.035] pointer-events-none z-0"
    >
    </div>

    <Header />

    <main
      class="pt-4 min-h-[calc(100vh-var(--footer-height,12rem))] relative z-10"
    >
      <slot />
    </main>

    <Footer />
  </body>
</html>
