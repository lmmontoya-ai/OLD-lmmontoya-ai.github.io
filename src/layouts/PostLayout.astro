---
import Layout from './Layout.astro';
import Sidebar from '../components/post/Sidebar.astro';
import TableOfContents from '../components/post/TableOfContents.astro';
import { getRelatedPosts, getBreadcrumbs } from '../utils/content';
import type { Post } from '../utils/content';

interface Props {
  post: Post;
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

// Get related posts
const relatedPosts = await getRelatedPosts(post);
const breadcrumbs = getBreadcrumbs(post);

// Determine accent color based on primary type
const accentColors = {
  roadmap: 'gold',
  project: 'blue',
  literature: 'green',
  blog: 'blue',
  note: 'blue',
  guide: 'green',
} as const;

const primaryType = post.data.types[0];
const accentColor = post.data.display?.accent || accentColors[primaryType] || 'blue';

// Layout classes
const layoutClasses = {
  default: 'max-w-4xl',
  wide: 'max-w-6xl',
  centered: 'max-w-3xl',
} as const;

const contentWidth = layoutClasses[post.data.display?.layout || 'default'];

// Show TOC if enabled and there are headings
const showToc = post.data.display?.showToc !== false && headings.filter(h => h.depth === 2 || h.depth === 3).length > 0;

// Accent color CSS classes
const accentClasses = {
  blue: 'border-brand-primary',
  gold: 'border-brand-secondary',
  green: 'border-status-success',
} as const;

const sidebarAccentClass = accentClasses[accentColor];
---

<Layout
  title={post.data.seo?.metaTitle || post.data.title}
  description={post.data.seo?.metaDescription || post.data.excerpt}
>
  <div class="min-h-screen relative">
    <!-- Background pattern -->
    <div class="absolute inset-0 bg-grid-pattern opacity-[0.015] pointer-events-none"></div>

    <!-- Main container -->
    <div class="relative z-10 pt-20">
      <!-- Breadcrumbs -->
      <div class="container mx-auto px-6 lg:px-16 xl:px-24 mb-6">
        <nav aria-label="Breadcrumb" class="text-sm font-mono">
          <ol class="flex items-center space-x-2">
            {breadcrumbs.map((item, index) => (
              <li class="flex items-center">
                {index > 0 && (
                  <svg class="w-3 h-3 mx-2 text-content-tertiary" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                  </svg>
                )}
                {index === breadcrumbs.length - 1 ? (
                  <span class="text-content-tertiary">{item.label}</span>
                ) : (
                  <a href={item.href} class="text-content-secondary hover:text-content-primary transition-colors">
                    {item.label}
                  </a>
                )}
              </li>
            ))}
          </ol>
        </nav>
      </div>

      <!-- Split layout container -->
      <div class="container mx-auto px-6 lg:px-16 xl:px-24">
        <div class="flex gap-8 lg:gap-12">
          <!-- Sidebar Component -->
          <Sidebar
            post={post}
            relatedPosts={relatedPosts}
            headings={headings}
            showToc={showToc}
            accentColor={accentColor}
          />

          <!-- Main content area -->
          <main class={`flex-1 min-w-0 ${contentWidth} mx-auto`}>
            <!-- Post Header -->
            <header class="mb-12">
              <!-- Type badges -->
              <div class="flex flex-wrap gap-2 mb-6">
                {post.data.types.map((type) => (
                  <span class={`inline-flex items-center gap-1.5 px-3 py-1 rounded-full text-xs font-medium capitalize ${accentClasses[accentColor]} bg-current/10 text-current border border-current/20`}>
                    {type}
                  </span>
                ))}

                {post.data.status === 'in-progress' && (
                  <span class="inline-flex items-center gap-1.5 px-3 py-1 rounded-full text-xs font-medium bg-status-warning/10 text-status-warning border border-status-warning/20">
                    <div class="w-1.5 h-1.5 rounded-full bg-current animate-pulse"></div>
                    In Progress
                  </span>
                )}
              </div>

              <!-- Title -->
              <h1 class="text-4xl md:text-5xl font-sans font-bold text-content-primary leading-tight mb-4">
                {post.data.title}
              </h1>

              <!-- Excerpt -->
              <p class="text-xl text-content-secondary leading-relaxed mb-6">
                {post.data.excerpt}
              </p>

              <!-- Metadata bar -->
              <div class="flex flex-wrap items-center gap-4 text-sm text-content-tertiary font-mono">
                <time datetime={post.data.date.toISOString()} class="flex items-center gap-1.5">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  <span class="opacity-80">{post.data.date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
                </time>

                {post.data.readingTime && (
                  <>
                    <span class="opacity-60">•</span>
                    <span class="opacity-80">{post.data.readingTime} min read</span>
                  </>
                )}

                {post.data.wordCount && (
                  <>
                    <span class="opacity-60">•</span>
                    <span class="opacity-80">{post.data.wordCount.toLocaleString()} words</span>
                  </>
                )}
              </div>

              <!-- Hero image -->
              {post.data.media?.hero && (
                <div class="mt-8 -mx-6 md:-mx-12 lg:-mx-16">
                  <img
                    src={post.data.media.hero}
                    alt={post.data.title}
                    class="w-full h-64 md:h-80 lg:h-96 object-cover rounded-lg"
                    loading="eager"
                  />
                </div>
              )}
            </header>

            <!-- Article content -->
            <article class="prose prose-lg max-w-none prose-headings:text-content-primary prose-p:text-content-secondary prose-a:text-brand-primary prose-strong:text-content-primary prose-code:text-content-primary prose-pre:bg-bg-secondary prose-pre:border prose-pre:border-border-secondary">
              <Content />
            </article>

            <!-- Post Footer -->
            <footer class="mt-16 pt-8 border-t border-border-secondary">
              <!-- Tags -->
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="mb-8">
                  <h3 class="text-sm font-mono font-medium text-content-tertiary uppercase tracking-wider mb-3">
                    Tags
                  </h3>
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags.map((tag) => (
                      <span class="px-3 py-1 rounded-full text-xs font-medium bg-bg-secondary text-content-secondary border border-border-secondary hover:border-border-primary transition-colors">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}

              <!-- Share section -->
              <div class="mb-8">
                <h3 class="text-sm font-mono font-medium text-content-tertiary uppercase tracking-wider mb-3">
                  Share
                </h3>
                <div class="flex gap-3">
                  <button
                    onclick="navigator.share ? navigator.share({title: this.dataset.title, url: this.dataset.url}) : navigator.clipboard.writeText(this.dataset.url)"
                    data-title={post.data.title}
                    data-url={Astro.url.href}
                    class="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium bg-bg-secondary text-content-secondary border border-border-secondary hover:border-border-primary hover:text-content-primary transition-colors"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                    Copy Link
                  </button>
                </div>
              </div>

              <!-- Related posts -->
              {post.data.display?.showRelated !== false && relatedPosts.length > 0 && (
                <div class="mt-12">
                  <h3 class="text-lg font-sans font-semibold text-content-primary mb-6">
                    Related Posts
                  </h3>
                  <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                    {relatedPosts.map((relatedPost) => (
                      <a
                        href={`/posts/${relatedPost.slug}`}
                        class="group block p-6 bg-bg-secondary/50 backdrop-blur-sm rounded-xl border border-border-secondary hover:border-border-primary transition-all duration-200"
                      >
                        <h4 class="font-sans font-semibold text-content-primary group-hover:text-brand-primary transition-colors mb-2 line-clamp-2">
                          {relatedPost.data.title}
                        </h4>
                        <p class="text-sm text-content-tertiary mb-3 line-clamp-3">
                          {relatedPost.data.excerpt}
                        </p>
                        <div class="flex items-center gap-2 text-xs text-content-tertiary">
                          <time datetime={relatedPost.data.date.toISOString()}>
                            {relatedPost.data.date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                          </time>
                          <span>•</span>
                          <span class="capitalize">{relatedPost.data.types[0]}</span>
                        </div>
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </footer>
          </main>
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile TOC (Fixed bottom sheet) -->
  {showToc && (
    <div class="lg:hidden fixed bottom-0 left-0 right-0 z-50">
      <TableOfContents
        headings={headings}
        variant="mobile"
      />
    </div>
  )}
</Layout>

<style>
  /* Custom prose overrides for interactive content */
  article :global(.interactive-demo) {
    margin: 2rem -1rem;
    padding: 2rem;
    background: rgb(var(--color-bg-secondary));
    border-radius: 1rem;
    border: 1px solid rgb(var(--color-border-primary));
  }

  article :global(.full-bleed) {
    margin-left: calc(-50vw + 50%);
    margin-right: calc(-50vw + 50%);
  }

  /* Smooth scroll for anchor links */
  html {
    scroll-behavior: smooth;
    scroll-padding-top: 6rem;
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  // Scroll spy for active heading
  document.addEventListener('astro:page-load', () => {
    const tocLinks = document.querySelectorAll('[data-toc-link]');
    const headings = document.querySelectorAll('h2, h3');

    if (tocLinks.length === 0 || headings.length === 0) return;

    // Create intersection observer
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          const tocLink = document.querySelector(`[data-heading-id="${id}"]`);

          if (tocLink) {
            if (entry.isIntersecting) {
              // Remove active from all links
              tocLinks.forEach((link) => {
                link.classList.remove('text-brand-primary', 'font-medium');
                link.classList.add('text-content-secondary');
              });

              // Add active to current link
              tocLink.classList.remove('text-content-secondary');
              tocLink.classList.add('text-brand-primary', 'font-medium');
            }
          }
        });
      },
      {
        rootMargin: '-20% 0% -35% 0%',
        threshold: 0
      }
    );

    // Observe all headings
    headings.forEach((heading) => {
      if (heading.id) observer.observe(heading);
    });

    // Smooth scroll on click
    tocLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('data-heading-id');

        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });
  });

  // Search functionality placeholder
  document.addEventListener('astro:page-load', () => {
    const searchInput = document.getElementById('post-search');

    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value;
        // TODO: Implement search functionality
        console.log('Search query:', query);
      });
    }
  });
</script>
