---
import Layout from "../../layouts/Layout.astro";
import BlogCard from "../../components/cards/BlogCard.astro";
import { getPostsByType } from "../../utils/content";
import Pill from "../../components/ui/Pill.astro";

// Fetch and sort blog posts
const blogPosts = await getPostsByType("blog");
const sortedPosts = blogPosts.sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
);

// Group by category
const postsByCategory = sortedPosts.reduce(
  (acc, post) => {
    const category = post.data.category;
    if (!acc[category]) acc[category] = [];
    acc[category].push(post);
    return acc;
  },
  {} as Record<string, typeof blogPosts>
);

// Group by year for alternative view
const postsByYear = sortedPosts.reduce(
  (acc, post) => {
    const year = post.data.date.getFullYear();
    if (!acc[year]) acc[year] = [];
    acc[year].push(post);
    return acc;
  },
  {} as Record<number, typeof blogPosts>
);

const years = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
const categories = Object.keys(postsByCategory).sort();
---

<Layout
  title="Blog â€” Luis Miguel Montoya"
  description="Thoughts on AI interpretability, alignment, and the journey from physics to machine learning."
>
  <div class="min-h-screen pt-20 pb-16">
    <div class="container mx-auto px-6 lg:px-16 xl:px-24">
      <!-- Header -->
      <header class="mb-16">
        <h1 class="text-5xl md:text-6xl font-bold text-interactive-blue mb-6">
          Blog
        </h1>
        <p class="text-xl text-content-secondary max-w-2xl leading-relaxed">
          Thoughts on AI interpretability, alignment, and the journey from
          physics to machine learning.
        </p>
      </header>

      <!-- View Toggle -->
      <div class="mb-8 flex gap-2">
        <button class="view-toggle active" data-view="category">
          By Category
        </button>
        <button class="view-toggle" data-view="timeline"> Timeline </button>
      </div>

      <!-- Category Filter (shown when category view is active) -->
      <div class="mb-8" id="category-filters">
        <div class="flex flex-wrap gap-2">
          <Pill
            variant="default"
            text="All Posts"
            count={sortedPosts.length}
            active={true}
            class="category-pill"
            data-filter="all"
          />
          {
            categories.map((category) => (
              <Pill
                variant={category.toLowerCase() as any}
                text={category}
                count={postsByCategory[category].length}
                class="category-pill"
                data-filter={category}
              />
            ))
          }
        </div>
      </div>

      <!-- Posts Grid -->
      <div class="grid gap-6 md:grid-cols-2 xl:grid-cols-3" id="blog-grid">
        {
          sortedPosts.map((post, index) => (
            <a
              href={`/posts/${post.id}`}
              class="block blog-item"
              data-category={post.data.category}
              data-year={post.data.date.getFullYear()}
              style={`animation-delay: ${index * 50}ms`}
            >
              <BlogCard post={post} />
            </a>
          ))
        }
      </div>

      <!-- Timeline View (initially hidden) -->
      <div class="max-w-4xl timeline-view hidden">
        {
          years.map((year) => (
            <section class="mb-12">
              <h2
                class="text-2xl font-semibold text-primary mb-6
                       sticky top-20 bg-surface-primary/90 backdrop-blur-sm py-2 -mx-2 px-2"
              >
                {year}
              </h2>

              <div class="grid gap-6 md:grid-cols-2">
                {postsByYear[Number(year)].map((post) => (
                  <a href={`/posts/${post.id}`} class="block">
                    <BlogCard post={post} />
                  </a>
                ))}
              </div>
            </section>
          ))
        }
      </div>

      <!-- Empty State -->
      {
        sortedPosts.length === 0 && (
          <div class="text-center py-16">
            <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-surface-secondary mb-4">
              <svg
                class="w-8 h-8 text-tertiary"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
                />
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-primary mb-2">
              No blog posts yet
            </h3>
            <p class="text-secondary">
              Check back soon for thoughts and insights!
            </p>
          </div>
        )
      }
    </div>
  </div>

  <style>
    .view-toggle {
      border-radius: 0.5rem;
      font-size: 0.875rem;
      font-weight: 500;
      padding: 0.5rem 1rem;
      background-color: oklch(var(--color-surface-secondary));
      color: oklch(var(--color-text-secondary));
      white-space: nowrap;
      transition: all 300ms cubic-bezier(0.34, 1.56, 0.64, 1);
    }

    .view-toggle:hover {
      background-color: oklch(var(--color-surface-tertiary));
      color: oklch(var(--color-text-primary));
    }

    .view-toggle.active {
      background-color: oklch(var(--color-interactive-blue));
      color: oklch(var(--color-content-inverse));
    }

    .blog-item {
      animation: fadeInUp 0.5s ease-out forwards;
      opacity: 0;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
      from {
        opacity: 0;
        transform: translateY(20px);
      }
    }

    .blog-item.hidden {
      display: none;
    }

    .timeline-view.hidden {
      display: none;
    }
  </style>

  <script>
    // View toggle functionality
    const viewToggleButtons = document.querySelectorAll(".view-toggle");
    const categoryFilters = document.getElementById("category-filters");
    const blogGrid = document.getElementById("blog-grid");
    const timelineView = document.querySelector(".timeline-view");

    // Filter functionality - updated for category pills
    const categoryButtons = document.querySelectorAll(".category-pill");
    const blogItems = document.querySelectorAll(".blog-item");

    // View switching
    viewToggleButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const view = button.getAttribute("data-view");

        // Update active state
        viewToggleButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");

        // Switch views
        if (view === "timeline") {
          categoryFilters?.classList.add("hidden");
          blogGrid?.classList.add("hidden");
          timelineView?.classList.remove("hidden");
        } else {
          categoryFilters?.classList.remove("hidden");
          blogGrid?.classList.remove("hidden");
          timelineView?.classList.add("hidden");
        }
      });
    });

    // Category filter (only works in category view)
    categoryButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const filter = button.getAttribute("data-filter");

        // Update active state
        categoryButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");

        // Filter items
        let visibleCount = 0;
        blogItems.forEach((item) => {
          const category = item.getAttribute("data-category");

          if (filter === "all" || category === filter) {
            item.classList.remove("hidden");
            (item as HTMLElement).style.animationDelay =
              `${visibleCount * 50}ms`;
            visibleCount++;
          } else {
            item.classList.add("hidden");
          }
        });
      });
    });
  </script>
</Layout>
