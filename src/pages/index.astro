---
// src/pages/index.astro
// Landing page with simplified hero featuring latest content cards

import Layout from "../layouts/Layout.astro";
import Hero from "../components/ui/Hero.astro";
import UpdateCard from "../components/ui/UpdateCard.astro";
import UpdatesContainer from "../components/ui/UpdatesContainer.astro";
import { getPostsByType } from "../utils/content";

// Fetch latest posts from each section
const roadmapPosts = await getPostsByType("roadmap");
const projectPosts = await getPostsByType("project");
const literaturePosts = await getPostsByType("literature");

// Get latest from each type (handle empty arrays)
const latestRoadmap = roadmapPosts.sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
)[0];
const latestProject = projectPosts.sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
)[0];
const latestLiterature = literaturePosts.sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
)[0];

// Helper function to format date for display
function formatDate(date: Date): string {
  return date.toISOString().split("T")[0];
}

// Create fallback data for empty states
const fallbackRoadmap = {
  title: "Learning Journey Starting Soon",
  date: formatDate(new Date()),
  tag: "Roadmap Preview",
  description:
    "Follow along as I document my path through AI interpretability research.",
  href: "/roadmap",
};

const fallbackProject = {
  title: "Projects Coming Soon",
  date: formatDate(new Date()),
  tag: "Project Preview",
  description:
    "Exciting AI research projects and tools will be showcased here.",
  href: "/projects",
};

const fallbackLiterature = {
  title: "Literature Reviews Loading",
  date: formatDate(new Date()),
  tag: "Literature Preview",
  description: "Curated paper reviews and research insights will appear here.",
  href: "/literature",
};
---

<Layout title="Luis Miguel Montoya â€” Understand to Align">
  <Hero>
    <!-- Vertical stack of latest content cards -->
    <UpdatesContainer>
      <!-- Roadmap card -->
      {
        latestRoadmap ? (
          <UpdateCard
            title={latestRoadmap.data.title}
            date={formatDate(latestRoadmap.data.date)}
            tag="Latest Milestone"
            description={latestRoadmap.data.excerpt}
            href={`/posts/${latestRoadmap.id}`}
            icon="roadmap"
            variant="milestone"
          />
        ) : (
          <UpdateCard
            title={fallbackRoadmap.title}
            date={fallbackRoadmap.date}
            tag={fallbackRoadmap.tag}
            description={fallbackRoadmap.description}
            href={fallbackRoadmap.href}
            icon="roadmap"
            variant="milestone"
          />
        )
      }

      <!-- Project card -->
      {
        latestProject ? (
          <UpdateCard
            title={latestProject.data.title}
            date={formatDate(latestProject.data.date)}
            tag="Latest Project"
            description={latestProject.data.excerpt}
            href={`/posts/${latestProject.id}`}
            icon="project"
            variant="project"
          />
        ) : (
          <UpdateCard
            title={fallbackProject.title}
            date={fallbackProject.date}
            tag={fallbackProject.tag}
            description={fallbackProject.description}
            href={fallbackProject.href}
            icon="project"
            variant="project"
          />
        )
      }

      <!-- Literature card -->
      {
        latestLiterature ? (
          <UpdateCard
            title={latestLiterature.data.title}
            date={formatDate(latestLiterature.data.date)}
            tag="Latest Resource"
            description={latestLiterature.data.excerpt}
            href={`/posts/${latestLiterature.id}`}
            icon="literature"
            variant="resource"
          />
        ) : (
          <UpdateCard
            title={fallbackLiterature.title}
            date={fallbackLiterature.date}
            tag={fallbackLiterature.tag}
            description={fallbackLiterature.description}
            href={fallbackLiterature.href}
            icon="literature"
            variant="resource"
          />
        )
      }
    </UpdatesContainer>
  </Hero>
</Layout>

<style>
  .bg-grid-pattern {
    background-image: linear-gradient(
        to right,
        rgba(var(--color-primary), 0.05) 1px,
        transparent 1px
      ),
      linear-gradient(
        to bottom,
        rgba(var(--color-primary), 0.05) 1px,
        transparent 1px
      );
    background-size: 2rem 2rem;
  }
</style>
