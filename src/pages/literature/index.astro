---
import Layout from "../../layouts/Layout.astro";
import LiteratureCard from "../../components/cards/LiteratureCard.astro";
import { getPostsByType } from "../../utils/content";

// Fetch literature posts
const literature = await getPostsByType("literature");
const sortedLiterature = literature.sort((a, b) => {
  const aRating = a.data.literature?.rating ?? 0;
  const bRating = b.data.literature?.rating ?? 0;
  if (aRating !== bRating) return bRating - aRating;
  return b.data.date.getTime() - b.data.date.getTime();
});

// Get unique types that actually exist
const availableTypes = [
  ...new Set(
    sortedLiterature.map((item) => item.data.literature?.type).filter(Boolean)
  ),
];
---

<Layout
  title="Literature â€” Luis Miguel Montoya"
  description="Curated summaries and insights from AI research papers, books, and educational resources."
>
  <div class="min-h-screen pt-24 pb-20">
    <div class="container mx-auto px-6 lg:px-16 xl:px-24">
      <header class="mb-16">
        <h1 class="text-5xl md:text-6xl font-bold text-interactive-blue mb-6">
          Literature
        </h1>
        <p class="text-xl text-content-secondary max-w-2xl leading-relaxed">
          Curated summaries and insights from AI research papers, books, and
          educational resources.
        </p>
      </header>

      <!-- Filter System -->
      <div class="mb-12 space-y-6">
        <!-- Type Filter Tabs (Top Row) -->
        <div class="border-b border-border-primary">
          <div class="flex flex-wrap gap-x-2 -mb-px">
            <button class="literature-filter-tab active" data-type-filter="all">
              All Literature
              <span class="count">({sortedLiterature.length})</span>
            </button>
            {
              availableTypes.map((type) => {
                const count = sortedLiterature.filter(
                  (item) => item.data.literature?.type === type
                ).length;
                return (
                  <button class="literature-filter-tab" data-type-filter={type}>
                    {type}s<span class="count">({count})</span>
                  </button>
                );
              })
            }
          </div>
        </div>

        <!-- Bottom Row: Search and Sort -->
        <div class="flex flex-col sm:flex-row gap-4 max-w-2xl">
          <!-- Search -->
          <div class="relative flex-1 max-w-md">
            <svg
              class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-content-tertiary pointer-events-none"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <input
              type="text"
              id="search-input"
              placeholder="Search literature..."
              class="w-full pl-10 pr-4 py-2.5 bg-transparent border border-border-primary rounded-lg text-content-primary placeholder-content-tertiary focus:outline-none focus:border-interactive-blue transition-colors text-sm"
            />
          </div>

          <!-- Sort Dropdown -->
          <div class="relative flex-shrink-0" id="custom-sort-container">
            <button
              id="sort-button"
              type="button"
              class="flex items-center justify-between px-4 py-2.5 bg-transparent border border-border-primary rounded-lg text-content-primary focus:outline-none focus:border-interactive-blue transition-colors text-sm min-w-[140px]"
              aria-haspopup="listbox"
              aria-expanded="false"
            >
              <span id="sort-button-text">Best Rated</span>
              <svg
                id="sort-chevron"
                class="w-4 h-4 text-content-tertiary transform transition-transform duration-200 ml-2"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clip-rule="evenodd"></path>
              </svg>
            </button>
            <div
              id="sort-dropdown"
              class="absolute z-10 mt-1 w-full bg-surface-secondary rounded-lg shadow-xl border border-border-primary py-2 hidden overflow-hidden"
              role="listbox"
            >
              <button data-sort-value="rating" class="sort-option active-sort">
                Best Rated
              </button>
              <button data-sort-value="date" class="sort-option">
                Most Recent
              </button>
              <button data-sort-value="title" class="sort-option">
                Alphabetical
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Literature Grid -->
      <div
        id="literature-grid"
        class="grid gap-8 md:grid-cols-2 xl:grid-cols-3"
      >
        {
          sortedLiterature.map((item) => (
            <div
              class="literature-item"
              data-type={item.data.literature?.type || ""}
              data-title={item.data.title?.toLowerCase() || ""}
              data-rating={item.data.literature?.rating || 0}
              data-date={item.data.date.getTime()}
            >
              <a href={`/posts/${item.id}`} class="literature-card block">
                <LiteratureCard post={item} />
              </a>
            </div>
          ))
        }
      </div>

      <!-- Empty State -->
      <div class="hidden text-center py-20" id="empty-state">
        <h3 class="text-xl font-semibold text-content-primary mb-2">
          No literature found
        </h3>
        <p class="text-content-secondary">
          Try adjusting your search or filters.
        </p>
      </div>
    </div>
  </div>

  <script>
    function initializeLiteratureFilters() {
      const typeButtons = document.querySelectorAll(".literature-filter-tab");
      const searchInput = document.getElementById(
        "search-input"
      ) as HTMLInputElement;
      const sortButton = document.getElementById("sort-button");
      const sortDropdown = document.getElementById("sort-dropdown");
      const sortButtonText = document.getElementById("sort-button-text");
      const sortChevron = document.getElementById("sort-chevron");
      const sortOptions = document.querySelectorAll(".sort-option");
      const resultsCount = document.getElementById("results-count");

      let currentType = "all";
      let searchTerm = "";
      let currentSort = "rating";

      function sortLiteratureItems() {
        const grid = document.getElementById("literature-grid");
        if (!grid) return;

        const allCards = Array.from(
          grid.querySelectorAll(".literature-item")
        ) as HTMLElement[];

        // Sort all cards (both visible and hidden)
        allCards.sort((a, b) => {
          switch (currentSort) {
            case "rating":
              return (
                parseInt(b.getAttribute("data-rating") || "0") -
                parseInt(a.getAttribute("data-rating") || "0")
              );
            case "date":
              return (
                parseInt(b.getAttribute("data-date") || "0") -
                parseInt(a.getAttribute("data-date") || "0")
              );
            case "title":
              return (a.getAttribute("data-title") || "").localeCompare(
                b.getAttribute("data-title") || ""
              );
            default:
              return 0;
          }
        });

        // Re-append all cards in sorted order
        allCards.forEach((card) => {
          grid.appendChild(card);
        });
      }

      function updateFilters() {
        const grid = document.getElementById("literature-grid");
        if (!grid) return;

        const allCards = Array.from(
          grid.querySelectorAll(".literature-item")
        ) as HTMLElement[];

        let visibleCount = 0;

        allCards.forEach((card, index) => {
          const cardType = card.getAttribute("data-type") || "";
          const cardTitle = card.getAttribute("data-title") || "";

          const matchesType = currentType === "all" || cardType === currentType;
          const matchesSearch =
            searchTerm === "" ||
            cardTitle.toLowerCase().includes(searchTerm.toLowerCase());

          const isVisible = matchesType && matchesSearch;

          card.classList.toggle("hidden", !isVisible);

          if (isVisible) {
            (card as HTMLElement).style.animationDelay =
              `${visibleCount * 50}ms`;
            visibleCount++;
          }
        });

        // Update results count
        if (resultsCount) {
          resultsCount.textContent = visibleCount.toString();
        }

        // Show/hide empty state
        const emptyState = document.getElementById("empty-state");
        if (emptyState) {
          emptyState.classList.toggle("hidden", visibleCount > 0);
        }

        // Apply current sort order
        sortLiteratureItems();
      }

      function setActiveTab(
        buttons: NodeListOf<Element>,
        activeButton: Element
      ) {
        buttons.forEach((btn) => btn.classList.remove("active"));
        activeButton.classList.add("active");
      }

      // Type filter event listeners
      typeButtons.forEach((button) => {
        button.addEventListener("click", () => {
          currentType = button.getAttribute("data-type-filter") || "all";
          setActiveTab(typeButtons, button);
          updateFilters();
        });
      });

      // Search input event listener
      if (searchInput) {
        searchInput.addEventListener("input", (e) => {
          searchTerm = (e.target as HTMLInputElement).value;
          updateFilters();
        });
      }

      // Custom Sort Logic
      if (sortButton && sortDropdown && sortButtonText && sortChevron) {
        sortButton.addEventListener("click", () => {
          const isExpanded =
            sortButton.getAttribute("aria-expanded") === "true";
          sortButton.setAttribute("aria-expanded", (!isExpanded).toString());
          sortDropdown.classList.toggle("hidden");
          sortChevron.classList.toggle("rotate-180");
        });

        sortOptions.forEach((option) => {
          option.addEventListener("click", () => {
            currentSort = option.getAttribute("data-sort-value") || "rating";
            sortButtonText.textContent = option.textContent || "Best Rated";
            sortButton.setAttribute("aria-expanded", "false");
            sortDropdown.classList.add("hidden");
            sortChevron.classList.remove("rotate-180");

            sortOptions.forEach((opt) => opt.classList.remove("active-sort"));
            option.classList.add("active-sort");

            updateFilters();
          });
        });

        // Close dropdown on outside click
        document.addEventListener("click", (event) => {
          const container = document.getElementById("custom-sort-container");
          if (
            container &&
            !container.contains(event.target as Node) &&
            sortButton.getAttribute("aria-expanded") === "true"
          ) {
            sortButton.setAttribute("aria-expanded", "false");
            sortDropdown.classList.add("hidden");
            sortChevron.classList.remove("rotate-180");
          }
        });
      }

      updateFilters(); // Initial filter update
    }

    document.addEventListener("DOMContentLoaded", initializeLiteratureFilters);
    document.addEventListener("astro:page-load", initializeLiteratureFilters);
  </script>

  <style>
    /* Literature Filter Tabs - matching Projects page style */
    .literature-filter-tab {
      padding: 0.75rem 0.25rem; /* Adjusted padding for better spacing with underline */
      margin-bottom: -1px; /* Align with bottom border */
      font-size: 0.9rem;
      font-weight: 500;
      color: rgb(var(--color-content-secondary));
      background: transparent;
      border: none;
      border-bottom: 2px solid transparent;
      cursor: pointer;
      transition: all 0.2s ease;
      margin-right: 1rem; /* Spacing between tabs */
    }

    .literature-filter-tab:hover {
      color: rgb(var(--color-content-primary));
      border-bottom-color: rgb(var(--color-border-primary) / 0.3);
    }

    .literature-filter-tab.active {
      color: rgb(var(--color-interactive-blue));
      border-bottom-color: rgb(var(--color-interactive-blue));
      font-weight: 600;
    }

    .count {
      font-size: 0.75rem;
      font-weight: 400;
      color: rgb(var(--color-content-tertiary));
      margin-left: 0.375rem;
    }
    .literature-filter-tab.active .count {
      color: rgb(var(--color-interactive-blue) / 0.8);
    }

    /* Custom Sort Dropdown Styles */
    .sort-option {
      display: block;
      width: 100%;
      padding: 0.625rem 1rem;
      text-align: left;
      font-size: 0.875rem;
      color: rgb(var(--color-content-secondary));
      background-color: transparent;
      border: none;
      cursor: pointer;
      transition:
        background-color 0.15s ease,
        color 0.15s ease;
    }

    .sort-option:hover {
      background-color: rgb(var(--color-surface-tertiary));
      color: rgb(var(--color-content-primary));
    }

    .sort-option.active-sort {
      color: rgb(var(--color-interactive-blue));
      font-weight: 600;
      background-color: rgb(var(--color-interactive-blue) / 0.05);
    }

    .dark .sort-option.active-sort {
      background-color: rgb(var(--color-interactive-blue) / 0.1);
    }

    /* Literature item animations */
    .literature-item {
      transition:
        opacity 0.3s ease,
        transform 0.3s ease;
      animation: fadeInUp 0.5s ease-out forwards;
      opacity: 0;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
      from {
        opacity: 0;
        transform: translateY(20px);
      }
    }

    .literature-item.hidden {
      display: none;
    }

    /* Input and focus styles */
    input::placeholder {
      transition: opacity 0.2s ease;
    }
    input:focus::placeholder {
      opacity: 0.5;
    }
    input:focus,
    #sort-button:focus {
      outline: none;
    }
  </style>
</Layout>
