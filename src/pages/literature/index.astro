---
import Layout from "../../layouts/Layout.astro";
import LiteratureCard from "../../components/cards/LiteratureCard.astro";
import { getPostsByType } from "../../utils/content";

// Fetch literature posts
const literature = await getPostsByType("literature");
const sortedLiterature = literature.sort((a, b) => {
  const aRating = a.data.literature?.rating ?? 0;
  const bRating = b.data.literature?.rating ?? 0;
  if (aRating !== bRating) return bRating - aRating;
  return b.data.date.getTime() - a.data.date.getTime();
});

// Get unique types and difficulties that actually exist
const availableTypes = [
  ...new Set(
    sortedLiterature.map((item) => item.data.literature?.type).filter(Boolean)
  ),
];
const availableDifficulties = [
  ...new Set(
    sortedLiterature
      .map((item) => item.data.literature?.difficulty)
      .filter(Boolean)
  ),
];
---

<Layout
  title="Literature â€” Luis Miguel Montoya"
  description="Curated summaries and insights from AI research papers, books, and educational resources."
>
  <div class="min-h-screen pt-20 pb-16">
    <div class="container mx-auto px-6 lg:px-16 xl:px-24">
      <!-- Header -->
      <header class="mb-12">
        <h1 class="text-4xl md:text-5xl font-bold text-primary mb-4">
          Literature
        </h1>
        <p class="text-xl text-secondary max-w-3xl">
          Curated summaries and insights from AI research papers, books, and
          educational resources.
        </p>
      </header>

      <!-- Type Filters -->
      <div class="mb-6">
        <div class="flex flex-wrap gap-3">
          <button
            class="px-4 py-2 text-sm font-medium rounded-lg bg-interactive-blue text-white"
            data-type-filter="all"
          >
            All ({sortedLiterature.length})
          </button>
          {
            availableTypes.map((type) => (
              <button
                class="px-4 py-2 text-sm font-medium rounded-lg bg-surface-secondary text-secondary hover:bg-surface-tertiary transition-colors"
                data-type-filter={type}
              >
                {type}s (
                {
                  sortedLiterature.filter(
                    (item) => item.data.literature?.type === type
                  ).length
                }
                )
              </button>
            ))
          }
        </div>
      </div>

      <!-- Difficulty Filters -->
      <div class="mb-8">
        <div class="flex items-center gap-3 flex-wrap">
          <span class="text-sm font-medium text-tertiary">Difficulty:</span>
          <button
            class="px-3 py-1 text-sm rounded-md bg-interactive-blue text-white"
            data-difficulty-filter="all"
          >
            All
          </button>
          {
            availableDifficulties.map((difficulty) => (
              <button
                class="px-3 py-1 text-sm rounded-md bg-surface-secondary text-secondary hover:bg-surface-tertiary transition-colors"
                data-difficulty-filter={difficulty}
              >
                {difficulty}
              </button>
            ))
          }
        </div>
      </div>

      <!-- Literature Grid -->
      <div class="grid gap-8 md:grid-cols-2 xl:grid-cols-3">
        {
          sortedLiterature.map((item) => (
            <div>
              <a
                href={`/posts/${item.id}`}
                class="literature-card block"
                data-type={item.data.literature?.type || ""}
                data-difficulty={item.data.literature?.difficulty || ""}
              >
                <LiteratureCard post={item} />
              </a>
            </div>
          ))
        }
      </div>

      <!-- Empty State -->
      <div class="hidden text-center py-16" id="empty-state">
        <div
          class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-surface-secondary mb-4"
        >
          <svg
            class="w-8 h-8 text-tertiary"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
            ></path>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-primary mb-2">
          No literature found
        </h3>
        <p class="text-secondary">
          Try adjusting your filters to see more results.
        </p>
      </div>
    </div>
  </div>

  <script>
    function initializeLiteratureFilters() {
      const typeButtons = document.querySelectorAll("[data-type-filter]");
      const difficultyButtons = document.querySelectorAll(
        "[data-difficulty-filter]"
      );
      const cards = document.querySelectorAll(".literature-card");
      const emptyState = document.getElementById("empty-state");

      let currentType = "all";
      let currentDifficulty = "all";

      function updateFilters() {
        let visibleCount = 0;

        cards.forEach((card) => {
          const cardType = card.getAttribute("data-type") || "";
          const cardDifficulty = card.getAttribute("data-difficulty") || "";

          const typeMatch = currentType === "all" || cardType === currentType;
          const difficultyMatch =
            currentDifficulty === "all" || cardDifficulty === currentDifficulty;

          if (typeMatch && difficultyMatch) {
            (card as HTMLElement).style.display = "block";
            visibleCount++;
          } else {
            (card as HTMLElement).style.display = "none";
          }
        });

        // Show/hide empty state
        if (emptyState) {
          if (visibleCount === 0) {
            emptyState.classList.remove("hidden");
          } else {
            emptyState.classList.add("hidden");
          }
        }
      }

      function setActiveButton(
        buttons: NodeListOf<Element>,
        activeButton: Element
      ) {
        buttons.forEach((btn: Element) => {
          btn.classList.remove("bg-interactive-blue", "text-white");
          btn.classList.add("bg-surface-secondary", "text-secondary");
        });
        activeButton.classList.remove("bg-surface-secondary", "text-secondary");
        activeButton.classList.add("bg-interactive-blue", "text-white");
      }

      // Type filter handlers
      typeButtons.forEach((button) => {
        button.addEventListener("click", () => {
          currentType = button.getAttribute("data-type-filter") || "all";
          setActiveButton(typeButtons, button);
          updateFilters();
        });
      });

      // Difficulty filter handlers
      difficultyButtons.forEach((button) => {
        button.addEventListener("click", () => {
          currentDifficulty =
            button.getAttribute("data-difficulty-filter") || "all";
          setActiveButton(difficultyButtons, button);
          updateFilters();
        });
      });

      // Initial filter update
      updateFilters();
    }

    // Initialize on page load
    document.addEventListener("DOMContentLoaded", initializeLiteratureFilters);

    // Re-initialize on Astro page navigation
    document.addEventListener("astro:page-load", initializeLiteratureFilters);
  </script>
</Layout>
