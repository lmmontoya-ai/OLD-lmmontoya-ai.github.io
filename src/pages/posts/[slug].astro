---
import { getCollection } from "astro:content";
import PostLayout from "../../layouts/PostLayout.astro";
import type { GetStaticPaths } from "astro";
import type { Post } from "../../utils/content";

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await getCollection("posts", ({ data }) => {
    // Include posts based on content type and status
    const validStatuses = ["published"];

    // Add project-specific statuses if this is a project
    if (data.types?.includes("project")) {
      validStatuses.push("completed", "in-progress", "planned");
    }

    // Add roadmap-specific statuses if this is a roadmap item
    if (data.types?.includes("roadmap")) {
      validStatuses.push("completed", "in-progress");
    }

    // Include drafts in development mode
    const includeInDev = import.meta.env.DEV && data.status === "draft";

    return validStatuses.includes(data.status) || includeInDev;
  });

  return posts.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
};

interface Props {
  post: Post;
}

const { post } = Astro.props;

// Redirect handling for legacy URLs
const redirects: Record<string, string> = {
  // Add any legacy URL mappings here
  // Example: 'old-blog-post': '/posts/new-blog-post'
};

// Check if this is a redirect request
if (redirects[post.id]) {
  return Astro.redirect(redirects[post.id], 301);
}
---

<PostLayout post={post} />
