---
import Layout from "../../layouts/Layout.astro";
import ProjectCard from "../../components/cards/ProjectCard.astro";
import { getPostsByType } from "../../utils/content";

// Fetch and sort projects
const projects = await getPostsByType("project");
const sortedProjects = projects.sort((a, b) => {
  // Sort by status (completed first), then date
  const statusOrder = { completed: 0, "in-progress": 1, planned: 2 };
  const aOrder = statusOrder[a.data.status as keyof typeof statusOrder] ?? 3;
  const bOrder = statusOrder[b.data.status as keyof typeof statusOrder] ?? 3;

  if (aOrder !== bOrder) return aOrder - bOrder;
  return b.data.date.getTime() - a.data.date.getTime();
});

// Group by area
const projectsByArea = sortedProjects.reduce(
  (acc, project) => {
    const area = project.data.project?.area || "Other";
    if (!acc[area]) acc[area] = [];
    acc[area].push(project);
    return acc;
  },
  {} as Record<string, typeof projects>
);

const areas = Object.keys(projectsByArea).sort();

// Group by status for filter counts
const projectsByStatus = sortedProjects.reduce(
  (acc, project) => {
    const status = project.data.status || "planned";
    if (!acc[status]) acc[status] = [];
    acc[status].push(project);
    return acc;
  },
  {} as Record<string, typeof projects>
);

const statuses = Object.keys(projectsByStatus).sort();
---

<Layout
  title="Projects â€” Luis Miguel Montoya"
  description="AI interpretability research projects, tools, and explorations in understanding artificial minds."
>
  <div class="min-h-screen pt-24 pb-20">
    <div class="container mx-auto px-6 lg:px-16 xl:px-24">
      <header class="mb-16">
        <h1 class="text-5xl md:text-6xl font-bold text-interactive-blue mb-6">
          Projects
        </h1>
        <p class="text-xl text-content-secondary max-w-2xl leading-relaxed">
          AI interpretability research projects, tools, and explorations in
          understanding artificial minds.
        </p>
      </header>

      <!-- Filter Tabs -->
      <div class="mb-12 space-y-6">
        <!-- Area Filters -->
        <div class="border-b border-border-primary">
          <div class="flex flex-wrap gap-x-2 -mb-px">
            <button
              class="project-filter-tab active"
              data-filter="all"
              data-type="area"
            >
              All Projects
              <span class="count">({sortedProjects.length})</span>
            </button>
            {
              Object.entries(projectsByArea).map(([area, items]) => (
                <button
                  class="project-filter-tab"
                  data-filter={area}
                  data-type="area"
                >
                  {area}
                  <span class="count">({items.length})</span>
                </button>
              ))
            }
          </div>
        </div>

        <!-- Status Filters -->
        <div class="flex flex-wrap gap-3">
          <button
            class="status-pill status-pill-all active"
            data-filter="all"
            data-type="status"
          >
            All Projects
            <span class="ml-1.5 text-xs">({sortedProjects.length})</span>
          </button>
          <button
            class="status-pill status-pill-completed"
            data-filter="completed"
            data-type="status"
          >
            Completed
            <span class="ml-1.5 text-xs"
              >({projectsByStatus.completed?.length || 0})</span
            >
          </button>
          <button
            class="status-pill status-pill-in-progress"
            data-filter="in-progress"
            data-type="status"
          >
            In Progress
            <span class="ml-1.5 text-xs"
              >({projectsByStatus["in-progress"]?.length || 0})</span
            >
          </button>
          <button
            class="status-pill status-pill-planned"
            data-filter="planned"
            data-type="status"
          >
            Planned
            <span class="ml-1.5 text-xs"
              >({projectsByStatus.planned?.length || 0})</span
            >
          </button>
        </div>
      </div>

      <div class="grid gap-8 md:grid-cols-2 xl:grid-cols-3" id="projects-grid">
        {
          sortedProjects.map((project, index) => (
            <div
              class="project-item"
              data-area={project.data.project?.area || "Other"}
              data-status={project.data.status || "planned"}
              style={`animation-delay: ${index * 50}ms`}
            >
              <a href={`/posts/${project.id}`} class="block">
                <ProjectCard post={project} />
              </a>
            </div>
          ))
        }
      </div>

      {
        sortedProjects.length === 0 && (
          <div class="text-center py-20">
            <h3 class="text-xl font-semibold text-content-primary mb-2">
              No projects found
            </h3>
            <p class="text-content-secondary">Try adjusting your filters.</p>
          </div>
        )
      }
    </div>
  </div>

  <style>
    .project-filter-tab {
      padding: 0.75rem 0.25rem; /* Adjusted padding for better spacing with underline */
      margin-bottom: -1px; /* Align with bottom border */
      font-size: 0.9rem;
      font-weight: 500;
      color: rgb(var(--color-content-secondary));
      background: transparent;
      border: none;
      border-bottom: 2px solid transparent;
      cursor: pointer;
      transition: all 0.2s ease;
      margin-right: 1rem; /* Spacing between tabs */
    }

    .project-filter-tab:hover {
      color: rgb(var(--color-content-primary));
      border-bottom-color: rgb(var(--color-border-primary) / 0.3);
    }

    .project-filter-tab.active {
      color: rgb(var(--color-interactive-blue));
      border-bottom-color: rgb(var(--color-interactive-blue));
      font-weight: 600;
    }

    .count {
      font-size: 0.75rem;
      font-weight: 400;
      color: rgb(var(--color-content-tertiary));
      margin-left: 0.375rem;
    }
    .project-filter-tab.active .count {
      color: rgb(var(--color-interactive-blue) / 0.8);
    }

    .project-item {
      animation: fadeInUp 0.5s ease-out forwards;
      opacity: 0;
      height: 100%;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
      from {
        opacity: 0;
        transform: translateY(20px);
      }
    }

    .project-item.hidden {
      display: none;
    }
  </style>

  <script>
    const filterButtons = document.querySelectorAll(".project-filter-tab");
    const statusPills = document.querySelectorAll(".status-pill");
    const projectItems = document.querySelectorAll(".project-item");
    const projectsGrid = document.getElementById("projects-grid");
    const emptyState = document.querySelector(".text-center.py-20");

    // Track current filter state
    let currentAreaFilter: string = "all";
    let currentStatusFilter: string = "all";

    // Apply filters based on current state
    function applyFilters() {
      let visibleCount = 0;

      projectItems.forEach((item, index) => {
        const area = item.getAttribute("data-area") || "Other";
        const status = item.getAttribute("data-status") || "planned";

        const matchesArea =
          currentAreaFilter === "all" || area === currentAreaFilter;
        const matchesStatus =
          currentStatusFilter === "all" || status === currentStatusFilter;
        const isVisible = matchesArea && matchesStatus;

        item.classList.toggle("hidden", !isVisible);

        if (isVisible) {
          (item as HTMLElement).style.animationDelay = `${visibleCount * 50}ms`;
          visibleCount++;
        }
      });

      if (projectsGrid && emptyState) {
        projectsGrid.classList.toggle("hidden", visibleCount === 0);
        emptyState.classList.toggle("hidden", visibleCount > 0);
      }
    }

    // Handle area filter tabs
    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const filter = button.getAttribute("data-filter");
        if (!filter) return;

        // Update area filter state
        currentAreaFilter = filter;

        // Update button states
        filterButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");

        applyFilters();
      });
    });

    // Handle status filter pills
    statusPills.forEach((button) => {
      button.addEventListener("click", () => {
        const filter = button.getAttribute("data-filter");
        if (!filter) return;

        // Update status filter state
        currentStatusFilter = filter;

        // Update pill states
        statusPills.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");

        applyFilters();
      });
    });

    // Initialize filters
    applyFilters();
  </script>
</Layout>
